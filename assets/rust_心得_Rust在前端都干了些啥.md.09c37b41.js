import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.18ed7b43.js";const b=JSON.parse('{"title":"Rust 在前端都干了些啥？","description":"","frontmatter":{},"headers":[],"relativePath":"rust/心得/Rust在前端都干了些啥.md","filePath":"rust/心得/Rust在前端都干了些啥.md","lastUpdated":1693753860000}'),p={name:"rust/心得/Rust在前端都干了些啥.md"},o=l(`<h1 id="rust-在前端都干了些啥" tabindex="-1">Rust 在前端都干了些啥？ <a class="header-anchor" href="#rust-在前端都干了些啥" aria-label="Permalink to &quot;Rust 在前端都干了些啥？&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>这里有一篇两年前的文章：<a href="https://mp.weixin.qq.com/s?__biz=MzkxNDIzNTg4MA==&amp;mid=2247485792&amp;idx=1&amp;sn=682a4dee7ce4d3b47a81baf9ebd7a98a" target="_blank" rel="noreferrer">Rust 是 JavaScript 基础设施的未来</a>，应该还是有挺多人看到过的。当时在前端社区上还掀起了一阵 Rust 风，有人说怎么天天造轮子，有人说实在是学不动了，也有人抱着积极的心态去拥抱新东西。</p><p>那么现在两年已经过去了，好像 Rust 在前端领域的声音减少了，那么 Rust 在前端最近咋样了，都干了些啥？这篇文章我们来看下</p><h2 id="目前用-rust-搞了哪些前端基建工具" tabindex="-1">目前用 Rust 搞了哪些前端基建工具 <a class="header-anchor" href="#目前用-rust-搞了哪些前端基建工具" aria-label="Permalink to &quot;目前用 Rust 搞了哪些前端基建工具&quot;">​</a></h2><p>虽然有一些工具开头的那篇文章中已经讲了，但我这里还是要简单说一下。</p><h2 id="框架类" tabindex="-1">框架类 <a class="header-anchor" href="#框架类" aria-label="Permalink to &quot;框架类&quot;">​</a></h2><h3 id="yew" tabindex="-1"><a href="https://github.com/yewstack/yew" target="_blank" rel="noreferrer">Yew</a> <a class="header-anchor" href="#yew" aria-label="Permalink to &quot;[Yew](https://github.com/yewstack/yew)&quot;">​</a></h3><p>18 年 1 月开源的一个使用 Rust 写的 WebAssembly 前端 Web 框架，语法类似于 React，支持服务端渲染。内部使用的还是 React 那一套虚拟 DOM 和 diff 算法，性能一般般。个人感觉它的迭代速度好像有点慢，这么多年了还没出 1.0 版本。看官网的消息是目前已经在迭代下一个大版本了，后面性能应该会有提升。</p><p>一个简单的计数器代码长这个样子，和 React 还是很像的。</p><div class="language-rust vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">yew</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">prelude</span><span style="color:#F97583;">::*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">#[function_component]</span></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">App</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Html</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> counter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">use_state</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> onclick </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> counter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> counter</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">clone</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">move</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">_</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">counter </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            counter</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(value);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">html!</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;div&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;button {onclick}&gt;{ </span><span style="color:#9ECBFF;">&quot;+1&quot;</span><span style="color:#E1E4E8;"> }&lt;</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">button&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;p&gt;{ </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">counter }&lt;</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">p&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">div&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">yew</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">Renderer</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">App</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">new</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">yew</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">prelude</span><span style="color:#D73A49;">::*</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">#[function_component]</span></span>
<span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">App</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Html</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> counter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">use_state</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> onclick </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> counter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> counter</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">clone</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">move</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">_</span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">counter </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            counter</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(value);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">html!</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        &lt;div&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;button {onclick}&gt;{ </span><span style="color:#032F62;">&quot;+1&quot;</span><span style="color:#24292E;"> }&lt;</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">button&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;p&gt;{ </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">counter }&lt;</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">p&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">div&gt;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">yew</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">Renderer</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">App</span><span style="color:#24292E;">&gt;</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">new</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h3 id="dioxus" tabindex="-1"><a href="https://github.com/DioxusLabs/dioxus/blob/master/notes/README/ZH_CN.md" target="_blank" rel="noreferrer">Dioxus</a> <a class="header-anchor" href="#dioxus" aria-label="Permalink to &quot;[Dioxus](https://github.com/DioxusLabs/dioxus/blob/master/notes/README/ZH_CN.md)&quot;">​</a></h3><p>21 年初开源的跨端 GUI 框架，Dioxus 可以构建网页前端、桌面应用、静态网站、移动端应用、终端命令行程序等多类平台应用。这也是一个类似于 React 语法的框架，在 Web 端使用 WebAssembly，桌面和移动端使用系统 WebView，官方宣称在移动端性能远远超过 React Native。现在暂时还不推荐在生产上用，API 还不稳定。但是未来发展值得关注下。</p><p>一个计数器例子：</p><div class="language-rust vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">app</span><span style="color:#E1E4E8;">(cx</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Scope</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Element</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> count </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">use_state</span><span style="color:#E1E4E8;">(cx, </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    cx</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">rsx!</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        h1 { </span><span style="color:#9ECBFF;">&quot;counter: {count}&quot;</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">        button { onclick</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">move</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">_</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> count </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Click me&quot;</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">app</span><span style="color:#24292E;">(cx</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Scope</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Element</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">mut</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">use_state</span><span style="color:#24292E;">(cx, </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    cx</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">rsx!</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        h1 { </span><span style="color:#032F62;">&quot;counter: {count}&quot;</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">        button { onclick</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">move</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">_</span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Click me&quot;</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="tauri" tabindex="-1"><a href="https://github.com/tauri-apps/tauri" target="_blank" rel="noreferrer">Tauri</a> <a class="header-anchor" href="#tauri" aria-label="Permalink to &quot;[Tauri](https://github.com/tauri-apps/tauri)&quot;">​</a></h3><p>19 年底开源的一个桌面应用跨端框架，底层使用系统 WebView 来进行渲染。这个应该是已经火出前端圈了，可以用来代替 Electron，之前很多人拿它来做过文章。我自己拿它也写过小工具，感觉开发体验还可以。目前官方已经在迭代 2.0 版本了，后续会支持移动端。当前正式版的 API 已经稳定了，最新的是 1.4 版本，可以上生产环境，但是有个问题是 WebView 在不同的平台上可能渲染效果有点难完全保持一致，所以可能不太适合需要 UI 还原度很高的场景，另外在低版本的一些操作系统上不能很好的支持，现阶段开发桌面跨端应用还是继续用 Electron 吧，但是可以纳入为未来的一种技术选型中</p><h3 id="leptos" tabindex="-1"><a href="https://github.com/leptos-rs/leptos" target="_blank" rel="noreferrer">Leptos</a> <a class="header-anchor" href="#leptos" aria-label="Permalink to &quot;[Leptos](https://github.com/leptos-rs/leptos)&quot;">​</a></h3><p>22 年 8 月开源出来的一个 Rust 编写的全栈前端框架，支持服务端渲染，性能可以达到原生 Js 的 92%，性能比 Yew 要好。目前 API 已经基本稳定，可以上生产环境（相比 Yew 来说这迭代速度贼快了）。下面这个图是官方给出来的性能对比。它内部没有使用虚拟 DOM，而是使用细粒度更新，组件只会在创建的时候初始化渲染一次，并构建响应式系统来进行后续的细粒度更新。它的性能是要比上面提到的 Yew 要好得多，Dioxus 在 0.3 版本之后进行了专门的优化，性能和 Leptos 差不多。</p><p><img src="https://cdn.jsdelivr.net/gh/PuffMeow/PictureSave/doc/image-20230903183737450.png" alt="image-20230903183737450"></p><p>一个计数器例子：</p><div class="language-rust vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#[component]</span></span>
<span class="line"><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Button</span><span style="color:#E1E4E8;">(cx</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Scope</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">impl</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IntoView</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> (count, set_count) </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">create_signal</span><span style="color:#E1E4E8;">(cx, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">view!</span><span style="color:#E1E4E8;"> { cx,</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;button on</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">click</span><span style="color:#F97583;">=move</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">_</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        set_count</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">n</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">n </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    &gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;Click me: &quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      {count}</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">button&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#[component]</span></span>
<span class="line"><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Button</span><span style="color:#24292E;">(cx</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Scope</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">impl</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IntoView</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> (count, set_count) </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">create_signal</span><span style="color:#24292E;">(cx, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">view!</span><span style="color:#24292E;"> { cx,</span></span>
<span class="line"><span style="color:#24292E;">    &lt;button on</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">click</span><span style="color:#D73A49;">=move</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">_</span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        set_count</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">n</span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">n </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    &gt;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;Click me: &quot;</span></span>
<span class="line"><span style="color:#24292E;">      {count}</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">button&gt;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="其它" tabindex="-1">其它 <a class="header-anchor" href="#其它" aria-label="Permalink to &quot;其它&quot;">​</a></h3><p>还有 Seed、Percy 、Sycamore 这几个前端框架，最近几个月都没更新了，不用管它们了。</p><p>所以照目前趋势来看，WebAssembly 领域的前端框架主要关注上面的 Leptos 就好了，这个框架的迭代频率还是很快的。后续也可以持续关注 Dioxus 和 Tauri 这两个跨端框架，等它们完善之后，未来在技术选型上或许可以多一个选择。</p><h2 id="运行时" tabindex="-1">运行时 <a class="header-anchor" href="#运行时" aria-label="Permalink to &quot;运行时&quot;">​</a></h2><h3 id="deno" tabindex="-1"><a href="https://github.com/denoland/deno" target="_blank" rel="noreferrer">Deno</a> <a class="header-anchor" href="#deno" aria-label="Permalink to &quot;[Deno](https://github.com/denoland/deno)&quot;">​</a></h3><p>还记得这玩意吗？最近没啥热度了。</p><p>当初刚出来的时候就说它主打安全、TypeScript 无需配置开箱即用，内置一整套完整工具链如代码格式化工具、测试工具、Bench 工具、打包工具等，库中心化管理等。</p><p>Node 之父也是 Deno 之父(Ryan Dahl) 说 Node.js 的依赖管理是个败笔，特别是它 node_modules，一开始搞的所有库都采用中心化管理，通过 Url 来进行引入，不支持 package.json。结果 2022 年 8 月就开始支持实验性引入 npm 包，23 年正式发布了对 package.json 和 npm 的支持，自己啪啪打自己的脸，还发布了一篇文章解释为什么要支持 npm: <a href="https://deno.com/blog/package-json-support" target="_blank" rel="noreferrer">为什么我们添加 Deno 对 package.json 的支持</a>。大概的意思就是之前走的不兼容 npm 的路线导致社区上带来了很多声音，比如不能去复用 npm 生态，不支持运行老的 node 项目，自己搞一套标准放弃以前 node 积累的生态就是搬起石头砸自己的脚。</p><p>另外之前 Deno 载入远程包的时候会产生重复依赖的问题，比如同一个包的不同版本 &quot;<a href="https://deno.land/std@0.179.0/uuid/mod.ts" target="_blank" rel="noreferrer">https://deno.land/std@0.179.0/uuid/mod.ts</a>&quot; 和 <a href="https://deno.land/std@0.179.1/uuid/mod.ts%EF%BC%8C%E5%AE%83%E4%BB%AC%E6%98%AF%E5%87%A0%E4%B9%8E%E7%9B%B8%E5%90%8C%E7%9A%84%E4%BB%A3%E7%A0%81%EF%BC%8C%E4%BD%86%E6%98%AF%E5%AE%83%E4%BB%AC%E7%89%88%E6%9C%AC%E5%8F%B7%E9%83%BD%E5%87%BA%E7%8E%B0%E5%9C%A8%E4%BA%86%E6%A8%A1%E5%9D%97%E5%9B%BE%E4%B8%AD%E3%80%82" target="_blank" rel="noreferrer">https://deno.land/std@0.179.1/uuid/mod.ts，它们是几乎相同的代码，但是它们版本号都出现在了模块图中。</a></p><p>Deno 给出的一个现代化解决方案就是使用裸说明符来引入，比如在 deno.json 中通过这样的方式去同时支持引入 deno 三方包和 npm 三方包</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;imports&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;oak&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;deno:oak@12&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;chalk&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;npm:chalk@5&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;imports&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;oak&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;deno:oak@12&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;chalk&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;npm:chalk@5&quot;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>使用方式也很简单，还是和以前一样，oak(类似于 Koa 的服务端框架) 来自于 deno， chalk 来自于 npm。</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">import oak from </span><span style="color:#9ECBFF;">&quot;oak&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">import chalk from </span><span style="color:#9ECBFF;">&quot;chalk&quot;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">import oak from </span><span style="color:#032F62;">&quot;oak&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">import chalk from </span><span style="color:#032F62;">&quot;chalk&quot;</span><span style="color:#24292E;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>官方也提供了 NPM 编译器（DNT）将 Deno 的代码转换为 NPM 包可以供 Node.js 直接使用。</p><p>总的来说，Deno 在向好的方向发展，自己捡回了以前 node 积累下来的生态去走兼容路线，并且同时在发展自己的特色。</p><p>这里有一个官方给出的和 Node 的特性对比：</p><table><thead><tr><th>Deno</th><th>Node</th></tr></thead><tbody><tr><td>[√] 数以百万计的社区模块</td><td>[√] 数以百万计的社区模块</td></tr><tr><td>[√] 内置 V8 引擎</td><td>[√] 内置 V8 引擎</td></tr><tr><td>[√] 默认安全的运行时(使用文件/网络等能力时需要赋予权限，可以防止三方包的违法行为)</td><td>[×] 不保证运行时安全</td></tr><tr><td>[√] 内置 TypeScript、JSX、一整套代码开发工具链</td><td>[×] 要配置一大堆的工具链文件</td></tr><tr><td>[√] 写原生 Rust 扩展很简单</td><td>[×] 写原生 C++ 扩展老复杂了</td></tr><tr><td>[√] 内置浏览器标准 API</td><td>[×] 不覆盖完整的浏览器 API</td></tr><tr><td>[√] 所有标准库</td><td>[×] 有限的标准库</td></tr></tbody></table><p>同时 Web Server 请求的性能也超 Node.js 一倍，当然这些都是实验性数据，实际上生产项目后效果怎样还要打个问号 ？</p><p><img src="https://cdn.jsdelivr.net/gh/PuffMeow/PictureSave/doc/image-20230830002425523.png" alt="image-20230830002425523"></p><p>另外还有一个用 Zig 语言写的 Bun JavaScript 运行时也值得关注一下~</p><p>我个人对于 Deno 的发展还是抱着比较乐观的心态的，等他真正成熟了以后可以多一个选择，TypeScript 开箱即用以及零配置的理念还是很好的，对于开发者来说可以开箱即用，不需要搞一大堆的配置。关于安全的特性，Node.js 在 20 版本之后开启了实验性支持，这点也是跟随 Deno，但是其它 Deno 好用的特性不知道以后 Node.js 会不会跟上。</p><h2 id="工具类" tabindex="-1">工具类 <a class="header-anchor" href="#工具类" aria-label="Permalink to &quot;工具类&quot;">​</a></h2><h3 id="swc" tabindex="-1"><a href="https://github.com/swc-project/swc" target="_blank" rel="noreferrer">SWC</a> <a class="header-anchor" href="#swc" aria-label="Permalink to &quot;[SWC](https://github.com/swc-project/swc)&quot;">​</a></h3><p>swc 是用 Rust 编写的超快 TypeScript/JavaScript 编译器。同时支持 Rust 和 JavaScript ，可以用于代替 Babel。</p><p>这里是官方给的性能对比数据： <a href="https://swc.rs/docs/benchmarks" target="_blank" rel="noreferrer">Benchmarks</a>，总结一下就是同步性能 swc 远超 Babel 和 esbuild，异步和多线程的性能 swc 和 esbuild 差不多，但都是远超 Babel 的。</p><p>这两年里面也越来越多的前端项目都使用 swc/esbuild 来代替 Babel 了。Deno 打包构建也是使用的 swc。我自己目前也在开发的项目中使用，构建速度上确实有比较明显的提升。</p><p>虽然快是快了，但是有个问题是不兼容 JavaScript 的生态， swc 不兼容 Babel 的一些插件，但是常用的插件在 swc 都能够找到对应的代替方案。</p><p>另外还有个问题就是写 swc 插件不支持使用 JS/TS 去写插件，只能使用 Rust， 这就造成了上手成本高的问题，会劝退很多人，但是好处就是可以获得比较高的性能收益（不要提 Rust 开发效率低，在熟悉了之后其实写起来效率挺高的）。当你的需求需要定制化或比较复杂的时候你不会 Rust 并且社区上也没有对应的开源方案，那就只能抓瞎了，最后换回 Babel，这也是一个比较尴尬的地方。但是我相信发展下去也会越来越完善的。</p><p>使用其实也比较简单，在 Webpack 中可以直接引入 swc-loader 即可</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">rules</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    test:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">m</span><span style="color:#F97583;">?</span><span style="color:#DBEDFF;">js</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    exclude:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">(node_modules)</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    use: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 使用 \`.swcrc\` 文件来进行配置</span></span>
<span class="line"><span style="color:#E1E4E8;">      loader: </span><span style="color:#9ECBFF;">&#39;swc-loader&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">];</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">rules</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    test:</span><span style="color:#032F62;"> /</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">m</span><span style="color:#D73A49;">?</span><span style="color:#032F62;">js</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    exclude:</span><span style="color:#032F62;"> /(node_modules)/</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    use: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 使用 \`.swcrc\` 文件来进行配置</span></span>
<span class="line"><span style="color:#24292E;">      loader: </span><span style="color:#032F62;">&#39;swc-loader&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="lightning-css" tabindex="-1"><a href="https://lightningcss.dev/" target="_blank" rel="noreferrer">Lightning CSS</a> <a class="header-anchor" href="#lightning-css" aria-label="Permalink to &quot;[Lightning CSS](https://lightningcss.dev/)&quot;">​</a></h3><p>21 年 10 月开源的一个非常快的 CSS 解析器、转换器、打包器和压缩器。它是 cssnano 的一个 Rust 代替方案，我们现在在 Webpack 中用的 postcss-loader 内部就使用了 cssnano。官方宣称它比使用 Node.js 实现的 cssnano 速度快 100 倍以上（每个 Rust 写的工具都要去跟 JS 比一比），它在单线程上每秒能压缩超过 270 万行代码。这是官方贴的对比图：</p><p><img src="https://cdn.jsdelivr.net/gh/PuffMeow/PictureSave/doc/image-20230903224919696.png" alt="image-20230903224919696"></p><p>对于中小项目来说，开发者使用体感可能并不强，但是对于大项目来说，可能可以将代码打包速度提升很多很多，但打包速度快了可能会让你少了喝一杯咖啡(or 摸鱼)的时间？</p><p>另外就是使用它打包的代码体积也会更小一些，这个还是挺有用的</p><p><img src="https://cdn.jsdelivr.net/gh/PuffMeow/PictureSave/doc/image-20230903225449281.png" alt="image-20230903225449281"></p><h3 id="rspack" tabindex="-1">Rspack <a class="header-anchor" href="#rspack" aria-label="Permalink to &quot;Rspack&quot;">​</a></h3><h3 id="farm" tabindex="-1">Farm <a class="header-anchor" href="#farm" aria-label="Permalink to &quot;Farm&quot;">​</a></h3><h3 id="rome" tabindex="-1">Rome <a class="header-anchor" href="#rome" aria-label="Permalink to &quot;Rome&quot;">​</a></h3>`,61),e=[o];function t(r,c,E,y,i,u){return n(),a("div",null,e)}const h=s(p,[["render",t]]);export{b as __pageData,h as default};
