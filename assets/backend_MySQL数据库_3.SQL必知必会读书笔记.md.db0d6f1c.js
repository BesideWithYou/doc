import{_ as s,c as a,o as n,N as l}from"./chunks/framework.3202de66.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"backend/MySQL数据库/3.SQL必知必会读书笔记.md","lastUpdated":1679672882000}'),p={name:"backend/MySQL数据库/3.SQL必知必会读书笔记.md"},e=l(`<h2 id="简述" tabindex="-1">简述 <a class="header-anchor" href="#简述" aria-label="Permalink to &quot;简述&quot;">​</a></h2><p>本文只会记录我觉得有收获的地方</p><h2 id="去重" tabindex="-1">去重 <a class="header-anchor" href="#去重" aria-label="Permalink to &quot;去重&quot;">​</a></h2><p>DISTINCT 它指示数据库只返回不同的值，可以达到去重的目的。如果使用 DISTINCT 关键字，它必须直接放在列名的前面</p><blockquote><p>不能部分使用 DISTINCT。DISTINCT 关键字作用于所有的列，不仅仅是跟在其后的那一列</p></blockquote><h2 id="分页" tabindex="-1">分页 <a class="header-anchor" href="#分页" aria-label="Permalink to &quot;分页&quot;">​</a></h2><p>LIMIT 和 OFFSET 一般用于做数据分页，但是在数据量大的时候会有性能问题。 建议在需要分页的表中使用自动递增的主键，然后使用 id 查询来代替 LIMIT/OFFSET 来做分页</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> table_name </span><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> id </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">LIMIT</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>LIMIT 指定返回的行数。LIMIT 带的 OFFSET 指定从哪儿开始</p><p>假如 Products 表中只有 9 种产品， LIMIT 5 OFFSET 5 只返回 4 行数据</p><p>LIMIT x, y 分句表示: 跳过 x 条数据，读取 y 条数据</p><blockquote><p>第一个被检索的行是第 0 行，而不是第 1 行</p></blockquote><blockquote><p>MySQL、MariaDB 和 SQLite 可以把 LIMIT 4 OFFSET 3 语句简化为 LIMIT 3,4。使用这个语法，逗号之前的值对应 &gt; OFFSET，逗号之后的值对应 LIMIT（反着的，要小心）。</p></blockquote><h2 id="排序" tabindex="-1">排序 <a class="header-anchor" href="#排序" aria-label="Permalink to &quot;排序&quot;">​</a></h2><p>ORDER BY 可以根据某个/多个字段来进行排序</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> prod_id, prod_price, prod_name</span></span>
<span class="line"><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> Products</span></span>
<span class="line"><span style="color:#F78C6C;">ORDER BY</span><span style="color:#A6ACCD;"> prod_price, prod_name;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>对 prod_name 列以字母顺序排序</p><blockquote><p>在指定一条 ORDER BY 子句时，应该保证它是 SELECT 语句中最后一条子句，就是要放到语句的最后</p></blockquote><h3 id="升序降序排序" tabindex="-1">升序降序排序 <a class="header-anchor" href="#升序降序排序" aria-label="Permalink to &quot;升序降序排序&quot;">​</a></h3><p>添加 DESC(DESCENDING) 关键字。ASC 是默认的升序（A-Z 排序）</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> prod_id, prod_price, prod_name</span></span>
<span class="line"><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> Products</span></span>
<span class="line"><span style="color:#F78C6C;">ORDER BY</span><span style="color:#A6ACCD;"> prod_price </span><span style="color:#F78C6C;">DESC</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><blockquote><p>如果想在多个列上进行降序排序，必须对每一列指定 DESC 关键字</p></blockquote><h2 id="过滤" tabindex="-1">过滤 <a class="header-anchor" href="#过滤" aria-label="Permalink to &quot;过滤&quot;">​</a></h2><p>使用 WHERE 关键字 + 条件</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> prod_name, prod_price</span></span>
<span class="line"><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> Products</span></span>
<span class="line"><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> prod_price </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">49</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><blockquote><p>在同时使用 ORDER BY 和 WHERE 子句时，应该让 ORDER BY 位于 WHERE 之后，否则将会产生错误</p></blockquote><p>条件操作符就是 &gt;、 =、 &lt; 、 &gt;= 、 &lt;=、 !&lt;、!= 或 &lt;&gt;、!&gt;、BETWEEN xx AND xx、 IS NULL 这些</p><h2 id="and-、or、in-、not-运算符" tabindex="-1">AND 、OR、IN 、NOT 运算符 <a class="header-anchor" href="#and-、or、in-、not-运算符" aria-label="Permalink to &quot;AND 、OR、IN 、NOT 运算符&quot;">​</a></h2><p>AND 同时满足</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> prod_id, prod_price, prod_name </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> Products</span></span>
<span class="line"><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> vend_id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">DLL01</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">AND</span><span style="color:#A6ACCD;"> prod_price </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>OR 其中一个满足</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> prod_id, prod_price, prod_name</span></span>
<span class="line"><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> Products</span></span>
<span class="line"><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> vend_id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">DLL01</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">OR</span><span style="color:#A6ACCD;"> vend_id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">BRS01</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>IN 操作符用来指定条件范围，范围中的每个条件都可以进行匹配，可以完成 OR 的功能(IN 操作符一般比一组 OR 操作符执行得更快)</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> prod_name, prod_price</span></span>
<span class="line"><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> Products</span></span>
<span class="line"><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> vend_id </span><span style="color:#F78C6C;">IN</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">DLL01</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">BRS01</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#F78C6C;">ORDER BY</span><span style="color:#A6ACCD;"> prod_name;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>和 != 功能一样，简单的子句中看不出它的啥优势，但在更复杂的子句中，NOT 是非常有用的。例如，在与 IN 操作符联合使用时，NOT 可以非常简单地找出与条件列表不匹配的行</p><h2 id="like-模糊匹配" tabindex="-1">LIKE 模糊匹配 <a class="header-anchor" href="#like-模糊匹配" aria-label="Permalink to &quot;LIKE 模糊匹配&quot;">​</a></h2><h3 id="百分号通配符" tabindex="-1">%百分号通配符 <a class="header-anchor" href="#百分号通配符" aria-label="Permalink to &quot;%百分号通配符&quot;">​</a></h3><p>%代表搜索模式中给定位置的 0 个、1 个或多个字符</p><p>比如找出所有以词 Fish 起头的产品</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> prod_id, prod_name</span></span>
<span class="line"><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> Products</span></span>
<span class="line"><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> prod_name </span><span style="color:#F78C6C;">LIKE</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Fish%</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>通配符可在搜索模式中的任意位置使用，并且可以使用多个通配符</p><p><code>搜索模式&#39;%bean bag%&#39;表示匹配任何位置上包含文本 bean bag 的值</code></p><blockquote><p>%不匹配 NULL，比如子句 WHERE prod_name LIKE &#39;%&#39;不会匹配产品名称为 NULL 的行。</p></blockquote><h3 id="下划线通配符" tabindex="-1">下划线通配符 <a class="header-anchor" href="#下划线通配符" aria-label="Permalink to &quot;下划线通配符&quot;">​</a></h3><p>下划线的用途与%一样，但它只匹配单个字符，而不是多个字符。与%能匹配多个字符不同，_总是刚好匹配一个字符，不能多也不能少</p><h3 id="使用技巧" tabindex="-1">使用技巧 <a class="header-anchor" href="#使用技巧" aria-label="Permalink to &quot;使用技巧&quot;">​</a></h3><p>通配符搜索一般比前面讨论的其他搜索要耗费更长的处理时间</p><ul><li>不要过度使用通配符。如果其他操作符能达到相同的目的，应该使用 其他操作符。</li><li>在确实需要使用通配符时，也尽量不要把它们用在搜索模式的开始 处。把通配符置于开始处，搜索起来是最慢的。</li><li>仔细注意通配符的位置。如果放错地方，可能不会返回想要的数据</li></ul><h2 id="计算字段" tabindex="-1">计算字段 <a class="header-anchor" href="#计算字段" aria-label="Permalink to &quot;计算字段&quot;">​</a></h2><p>在 SQL 语句内可完成的许多转换和格式化工作都可以直接在客户端应用程序内完成。但一般来说，在数据库服务器上完成这些操作比在客户端中完成要快得多。所以在数据库中的计算就很有用</p><h3 id="拼接" tabindex="-1">拼接 <a class="header-anchor" href="#拼接" aria-label="Permalink to &quot;拼接&quot;">​</a></h3><p>SQL Server 使用+号。DB2、Oracle、PostgreSQL 和 SQLite 使用||</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> vend_name </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> vend_country </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">)</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> Vendors</span></span>
<span class="line"><span style="color:#F78C6C;">ORDER BY</span><span style="color:#A6ACCD;"> vend_name</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>MySQL 或 MariaDB，使用 Concat 函数</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Concat</span><span style="color:#A6ACCD;">(vend_name, </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;"> (</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">, vend_country, </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">)</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span></span>
<span class="line"><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> Vendors</span></span>
<span class="line"><span style="color:#F78C6C;">ORDER BY</span><span style="color:#A6ACCD;"> vend_name;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>可以输出比如： test (China) 这样的字段</p><h3 id="去除空格" tabindex="-1">去除空格 <a class="header-anchor" href="#去除空格" aria-label="Permalink to &quot;去除空格&quot;">​</a></h3><p>RTRIM() 函数可以去掉值右边的所有空格，LTRIM() 去掉字符串左边的空格以及 TRIM() 去掉字符 串左右两边的空格。</p><h3 id="别名" tabindex="-1">别名 <a class="header-anchor" href="#别名" aria-label="Permalink to &quot;别名&quot;">​</a></h3><p>SELECT 语句可以很好地拼接地址字段。但是， 这个新计算列的名字是什么呢？实际上它没有名字，它只是一个值，为了解决这个问题，SQL 支持列别名</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Concat</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">RTrim</span><span style="color:#A6ACCD;">(vend_name), </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;"> (</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">RTrim</span><span style="color:#A6ACCD;">(vend_country), </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">)</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#F78C6C;">AS</span><span style="color:#A6ACCD;"> vend_title</span></span>
<span class="line"><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> Vendors</span></span>
<span class="line"><span style="color:#F78C6C;">ORDER BY</span><span style="color:#A6ACCD;"> vend_name;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-label="Permalink to &quot;函数&quot;">​</a></h2>`,62),o=[e];function r(c,t,i,C,d,y){return n(),a("div",null,o)}const b=s(p,[["render",r]]);export{u as __pageData,b as default};
