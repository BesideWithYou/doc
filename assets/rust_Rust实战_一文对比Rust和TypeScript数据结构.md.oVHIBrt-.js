import{_ as a,o as t,c as e,R as r}from"./chunks/framework.KeRvpApV.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"rust/Rust实战/一文对比Rust和TypeScript数据结构.md","filePath":"rust/Rust实战/一文对比Rust和TypeScript数据结构.md","lastUpdated":1694704585000}'),i={name:"rust/Rust实战/一文对比Rust和TypeScript数据结构.md"},s=r('<h2 id="从一文对比-rust-和-typescript-的数据结构" tabindex="-1">从一文对比 Rust 和 TypeScript 的数据结构 <a class="header-anchor" href="#从一文对比-rust-和-typescript-的数据结构" aria-label="Permalink to &quot;从一文对比 Rust 和 TypeScript 的数据结构&quot;">​</a></h2><h3 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h3><p>此文的目的是在于对照学习，从 Rust 和 TypeScript 的代码中学习它们的相同点和差异点，并温习常用的数据结构。</p><p>我们会先从简单的栈和队列开始，然后再到稍微复杂点的链表和树，最后再到图，来整体的看下它们的代码风格。</p><p>下文我们都会以 Rust 版本和 TypeScript 版本来做对比，遇到一些知识点也会做相应的讲解。</p><h3 id="栈" tabindex="-1">栈 <a class="header-anchor" href="#栈" aria-label="Permalink to &quot;栈&quot;">​</a></h3><p>栈比较简单，我们直接来封装一个栈结构并提供对应的 API 即可</p><h4 id="rust-版本" tabindex="-1">Rust 版本 <a class="header-anchor" href="#rust-版本" aria-label="Permalink to &quot;Rust 版本&quot;">​</a></h4><h4 id="typescript-版本" tabindex="-1">TypeScript 版本 <a class="header-anchor" href="#typescript-版本" aria-label="Permalink to &quot;TypeScript 版本&quot;">​</a></h4><h3 id="队列" tabindex="-1">队列 <a class="header-anchor" href="#队列" aria-label="Permalink to &quot;队列&quot;">​</a></h3><h4 id="rust-版本-1" tabindex="-1">Rust 版本 <a class="header-anchor" href="#rust-版本-1" aria-label="Permalink to &quot;Rust 版本&quot;">​</a></h4><h4 id="typescript-版本-1" tabindex="-1">TypeScript 版本 <a class="header-anchor" href="#typescript-版本-1" aria-label="Permalink to &quot;TypeScript 版本&quot;">​</a></h4><h3 id="链表" tabindex="-1">链表 <a class="header-anchor" href="#链表" aria-label="Permalink to &quot;链表&quot;">​</a></h3><h4 id="rust-版本-2" tabindex="-1">Rust 版本 <a class="header-anchor" href="#rust-版本-2" aria-label="Permalink to &quot;Rust 版本&quot;">​</a></h4><h4 id="typescript-版本-2" tabindex="-1">TypeScript 版本 <a class="header-anchor" href="#typescript-版本-2" aria-label="Permalink to &quot;TypeScript 版本&quot;">​</a></h4><h3 id="树" tabindex="-1">树 <a class="header-anchor" href="#树" aria-label="Permalink to &quot;树&quot;">​</a></h3><h4 id="rust-版本-3" tabindex="-1">Rust 版本 <a class="header-anchor" href="#rust-版本-3" aria-label="Permalink to &quot;Rust 版本&quot;">​</a></h4><h4 id="typescript-版本-3" tabindex="-1">TypeScript 版本 <a class="header-anchor" href="#typescript-版本-3" aria-label="Permalink to &quot;TypeScript 版本&quot;">​</a></h4><h3 id="图" tabindex="-1">图 <a class="header-anchor" href="#图" aria-label="Permalink to &quot;图&quot;">​</a></h3><h4 id="rust-版本-4" tabindex="-1">Rust 版本 <a class="header-anchor" href="#rust-版本-4" aria-label="Permalink to &quot;Rust 版本&quot;">​</a></h4><h4 id="typescript-版本-4" tabindex="-1">TypeScript 版本 <a class="header-anchor" href="#typescript-版本-4" aria-label="Permalink to &quot;TypeScript 版本&quot;">​</a></h4>',21),h=[s];function o(c,p,l,u,n,d){return t(),e("div",null,h)}const q=a(i,[["render",o]]);export{b as __pageData,q as default};
