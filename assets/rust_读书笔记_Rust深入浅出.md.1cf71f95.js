import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.18ed7b43.js";const F=JSON.parse('{"title":"Rust 深入浅出","description":"","frontmatter":{},"headers":[],"relativePath":"rust/读书笔记/Rust深入浅出.md","filePath":"rust/读书笔记/Rust深入浅出.md","lastUpdated":1691078437000}'),p={name:"rust/读书笔记/Rust深入浅出.md"},o=l(`<h1 id="rust-深入浅出" tabindex="-1">Rust 深入浅出 <a class="header-anchor" href="#rust-深入浅出" aria-label="Permalink to &quot;Rust 深入浅出&quot;">​</a></h1><p>主要记录一些可能会常用的东西</p><h2 id="控制台打印" tabindex="-1">控制台打印 <a class="header-anchor" href="#控制台打印" aria-label="Permalink to &quot;控制台打印&quot;">​</a></h2><div class="language-rust vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">println!</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{}&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;"> // 默认用法,打印Display</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">println!</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{:p}&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;"> // 指针</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">println!</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{:b}&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">15</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;"> // 二进制</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">println!</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{:e}&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10000</span><span style="color:#B392F0;">f32</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;"> // 科学计数(小写)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">println!</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{:E}&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10000</span><span style="color:#B392F0;">f32</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;"> // 科学计数(大写)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">println!</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{:?}&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;test&quot;</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;"> // 打印Debug</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">println!</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{:#?}&quot;</span><span style="color:#E1E4E8;">, (</span><span style="color:#9ECBFF;">&quot;test1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;test2&quot;</span><span style="color:#E1E4E8;">));</span><span style="color:#6A737D;"> // 带换行和缩进的Debug打印</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">println!</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{a} {b} {b}&quot;</span><span style="color:#E1E4E8;">, a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;x&quot;</span><span style="color:#E1E4E8;">, b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;y&quot;</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;"> // 命名参数</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{}&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span><span style="color:#6A737D;"> // 默认用法,打印Display</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{:p}&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span><span style="color:#6A737D;"> // 指针</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{:b}&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">15</span><span style="color:#24292E;">);</span><span style="color:#6A737D;"> // 二进制</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{:e}&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">10000</span><span style="color:#6F42C1;">f32</span><span style="color:#24292E;">);</span><span style="color:#6A737D;"> // 科学计数(小写)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{:E}&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">10000</span><span style="color:#6F42C1;">f32</span><span style="color:#24292E;">);</span><span style="color:#6A737D;"> // 科学计数(大写)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{:?}&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#24292E;">);</span><span style="color:#6A737D;"> // 打印Debug</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{:#?}&quot;</span><span style="color:#24292E;">, (</span><span style="color:#032F62;">&quot;test1&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;test2&quot;</span><span style="color:#24292E;">));</span><span style="color:#6A737D;"> // 带换行和缩进的Debug打印</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{a} {b} {b}&quot;</span><span style="color:#24292E;">, a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;x&quot;</span><span style="color:#24292E;">, b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;y&quot;</span><span style="color:#24292E;">);</span><span style="color:#6A737D;"> // 命名参数</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="解构变量" tabindex="-1">解构变量 <a class="header-anchor" href="#解构变量" aria-label="Permalink to &quot;解构变量&quot;">​</a></h2><div class="language-rust vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 解构并声明 a,b 可变变量</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> a, </span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> b) </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 解构结构体</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Point</span><span style="color:#E1E4E8;"> { x</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">ref</span><span style="color:#E1E4E8;"> a, y</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">ref</span><span style="color:#E1E4E8;"> b} </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> p;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 解构并声明 a,b 可变变量</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">mut</span><span style="color:#24292E;"> a, </span><span style="color:#D73A49;">mut</span><span style="color:#24292E;"> b) </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 解构结构体</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Point</span><span style="color:#24292E;"> { x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">ref</span><span style="color:#24292E;"> a, y</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">ref</span><span style="color:#24292E;"> b} </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="类型推导" tabindex="-1">类型推导 <a class="header-anchor" href="#类型推导" aria-label="Permalink to &quot;类型推导&quot;">​</a></h2><div class="language-rust vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> player_scores </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    (</span><span style="color:#9ECBFF;">&quot;Jack&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">), (</span><span style="color:#9ECBFF;">&quot;Jane&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">23</span><span style="color:#E1E4E8;">), (</span><span style="color:#9ECBFF;">&quot;Jill&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">18</span><span style="color:#E1E4E8;">), (</span><span style="color:#9ECBFF;">&quot;John&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">19</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">  ];</span></span>
<span class="line"><span style="color:#6A737D;">  // players 是动态数组,内部成员的类型没有指定,交给编译器自动推导</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> players </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Vec</span><span style="color:#E1E4E8;">&lt;_&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> player_scores</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">iter</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">|&amp;</span><span style="color:#E1E4E8;">(player, _score)</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    player</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">println!</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{:?}&quot;</span><span style="color:#E1E4E8;">, players);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> player_scores </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">    (</span><span style="color:#032F62;">&quot;Jack&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">), (</span><span style="color:#032F62;">&quot;Jane&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">23</span><span style="color:#24292E;">), (</span><span style="color:#032F62;">&quot;Jill&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">18</span><span style="color:#24292E;">), (</span><span style="color:#032F62;">&quot;John&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">19</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  ];</span></span>
<span class="line"><span style="color:#6A737D;">  // players 是动态数组,内部成员的类型没有指定,交给编译器自动推导</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> players </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Vec</span><span style="color:#24292E;">&lt;_&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> player_scores</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">iter</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">|&amp;</span><span style="color:#24292E;">(player, _score)</span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    player</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{:?}&quot;</span><span style="color:#24292E;">, players);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="静态变量" tabindex="-1">静态变量 <a class="header-anchor" href="#静态变量" aria-label="Permalink to &quot;静态变量&quot;">​</a></h2><p>在程序的整个生命周期都存在。生命周期为 &#39;static, Rust 中唯一的声明全局变量的方法</p><div class="language-rust vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">GLOBAL</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">i32</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6A737D;">  //全局变量必须声明的时候初始化,因为全局变量可以写到函数外面,被任意一个函数使用</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">G1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">i32</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">println!</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{}&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">G1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">  //可变全局变量无论读写都必须用 unsafe修饰</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">G2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">i32</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">unsafe</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">G2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">println!</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{}&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">G2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#6A737D;">  //全局变量的内存不是分配在当前函数栈上,函数退出的时候,并不会销毁全局变量占用的内存空间,程序退出才会</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">GLOBAL</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">i32</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#6A737D;">  //全局变量必须声明的时候初始化,因为全局变量可以写到函数外面,被任意一个函数使用</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">G1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">i32</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{}&quot;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">G1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">  //可变全局变量无论读写都必须用 unsafe修饰</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">mut</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">G2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">i32</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">unsafe</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">G2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{}&quot;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">G2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#6A737D;">  //全局变量的内存不是分配在当前函数栈上,函数退出的时候,并不会销毁全局变量占用的内存空间,程序退出才会</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>Rust 不允许在 main 函数之前或者之后执行自己的代码。比较复杂的 static 变量的初始化需要使用 lazy 方式，在第一次使用的时候再初始化。可以使用 lazy_static 库，一般在多线程场景和需要使用全局静态常量的情况下去使用</p><h2 id="浮点类型" tabindex="-1">浮点类型 <a class="header-anchor" href="#浮点类型" aria-label="Permalink to &quot;浮点类型&quot;">​</a></h2><p>这个类型是比较特殊的，所以单独记下来，Rust 提供了基于 IEEE 754-2008 标准的浮点类型（JS 也是） 在标准库中，有一个 std：：num：：FpCategory 枚举，表示了浮点 数可能的状态：</p><div class="language-rust vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FpCategory</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Nan</span><span style="color:#E1E4E8;">,</span><span style="color:#6A737D;"> // not a number</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Infinite</span><span style="color:#E1E4E8;">,</span><span style="color:#6A737D;"> // 无穷状态</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Zero</span><span style="color:#E1E4E8;">,</span><span style="color:#6A737D;">  // 0</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Subnormal</span><span style="color:#E1E4E8;">,</span><span style="color:#6A737D;"> // 这种状态下的浮点数表示精度比Normal状态下的精度低一点</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Normal</span><span style="color:#E1E4E8;">,</span><span style="color:#6A737D;"> // 正常状态</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FpCategory</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Nan</span><span style="color:#24292E;">,</span><span style="color:#6A737D;"> // not a number</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Infinite</span><span style="color:#24292E;">,</span><span style="color:#6A737D;"> // 无穷状态</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Zero</span><span style="color:#24292E;">,</span><span style="color:#6A737D;">  // 0</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Subnormal</span><span style="color:#24292E;">,</span><span style="color:#6A737D;"> // 这种状态下的浮点数表示精度比Normal状态下的精度低一点</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Normal</span><span style="color:#24292E;">,</span><span style="color:#6A737D;"> // 正常状态</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-rust vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1.0</span><span style="color:#B392F0;">f32</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> y </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.0</span><span style="color:#B392F0;">f32</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">  // inf NaN</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">println!</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{} {}&quot;</span><span style="color:#E1E4E8;">, x, y);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1.0</span><span style="color:#6F42C1;">f32</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.0</span><span style="color:#6F42C1;">f32</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">  // inf NaN</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{} {}&quot;</span><span style="color:#24292E;">, x, y);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>NaN 这个特殊值不具备“全序”的特点</p><div class="language-rust vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> nan </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">f32</span><span style="color:#F97583;">::</span><span style="color:#79B8FF;">NAN</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">  // false false false</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">println!</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{} {} {}&quot;</span><span style="color:#E1E4E8;">, nan </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> nan, nan </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> nan, nan </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> nan);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> nan </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">f32</span><span style="color:#D73A49;">::</span><span style="color:#005CC5;">NAN</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">  // false false false</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{} {} {}&quot;</span><span style="color:#24292E;">, nan </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> nan, nan </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> nan, nan </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> nan);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>因为 NaN 的存在，浮点数是不具备“全序关系”，这牵扯到 PartialOrd 和 Ord 这两个 trait</p><h2 id="指针" tabindex="-1">指针 <a class="header-anchor" href="#指针" aria-label="Permalink to &quot;指针&quot;">​</a></h2><p>常用指针</p><table><thead><tr><th>类型</th><th>简介</th></tr></thead><tbody><tr><td>Box&lt;T&gt;</td><td>指向类型 T，具有所有权，有权释放内存的指针</td></tr><tr><td>&amp;T</td><td>指向类型 T 的借用指针，也称为引用，无权释放内存，无权写数据</td></tr><tr><td>&amp;mut T</td><td>指向类型 T 的可变借用指针，无权释放内存，有权写数据</td></tr><tr><td>*const T</td><td>指向类型 T 的只读裸指针，没有生命周期信息，无权写数据</td></tr><tr><td>*mut T</td><td>指向类型 T 的可读写裸指针，没有生命周期信息，有权写数据</td></tr></tbody></table><p>另外还可以自己实现除标准库之外的智能指针，常见的标准库指针</p><table><thead><tr><th>类型</th><th>简介</th></tr></thead><tbody><tr><td>Rc&lt;T&gt;</td><td>指向类型 T 的引用计数指针，共享所有权，线程不安全</td></tr><tr><td>Arc&lt;T&gt;</td><td>指向类型 T 的原子型引用计数指针，共享所有权，线程安全</td></tr><tr><td>Cow&lt;&#39;a, T&gt;</td><td>Clone-on-write，写时复制指针。可能是引用指针，也可能是具有所有权的指针</td></tr></tbody></table><h2 id="类型转换" tabindex="-1">类型转换 <a class="header-anchor" href="#类型转换" aria-label="Permalink to &quot;类型转换&quot;">​</a></h2><p>Rust 不提供隐式类型转换，需要用 as 显式声明，以用来防止潜在的 bug</p><p>有些时候需要多次 as 才能转成功</p><div class="language-rust vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">  // 先转为 *const i32,再转为 *mut i32</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">i </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">i32</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*mut</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">i32</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">println!</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{:p}&quot;</span><span style="color:#E1E4E8;">, p);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">42</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">  // 先转为 *const i32,再转为 *mut i32</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">i </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">i32</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*mut</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">i32</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{:p}&quot;</span><span style="color:#24292E;">, p);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="newtype" tabindex="-1">newType <a class="header-anchor" href="#newtype" aria-label="Permalink to &quot;newType&quot;">​</a></h2><p>可以让我们在一 个类型的基础上创建一个新的类型</p><p>使用 tuple struct 做包装，创造了一个全新的类型，它跟被包装的类型不 能发生隐式类型转换</p><div class="language-rust vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Inches</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">i32</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">f1</span><span style="color:#E1E4E8;">(value </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Inches</span><span style="color:#E1E4E8;">) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">f2</span><span style="color:#E1E4E8;">(value </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">i32</span><span style="color:#E1E4E8;">) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> v </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">i32</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">f1</span><span style="color:#E1E4E8;">(v);</span><span style="color:#6A737D;"> // 编译不通过,&#39;mismatched types&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">f2</span><span style="color:#E1E4E8;">(v);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Inches</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">i32</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f1</span><span style="color:#24292E;">(value </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Inches</span><span style="color:#24292E;">) {}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f2</span><span style="color:#24292E;">(value </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">i32</span><span style="color:#24292E;">) {}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> v </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">i32</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">f1</span><span style="color:#24292E;">(v);</span><span style="color:#6A737D;"> // 编译不通过,&#39;mismatched types&#39;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">f2</span><span style="color:#24292E;">(v);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>类型别名，I 和 i32 实际还是同一个类型，只是起了个另外的名字</p><div class="language-rust vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">I</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">i32</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">I</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">i32</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="循环" tabindex="-1">循环 <a class="header-anchor" href="#循环" aria-label="Permalink to &quot;循环&quot;">​</a></h2><div class="language-RUST vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">RUST</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">std：：ops：：</span><span style="color:#B392F0;">RangeFrom</span><span style="color:#E1E4E8;"> 代表只有起始没有结束的范围，语法为</span></span>
<span class="line"><span style="color:#E1E4E8;">start</span><span style="color:#F97583;">..</span><span style="color:#E1E4E8;">，含义是 [start，</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">∞）；</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">std：：ops：：</span><span style="color:#6F42C1;">RangeFrom</span><span style="color:#24292E;"> 代表只有起始没有结束的范围，语法为</span></span>
<span class="line"><span style="color:#24292E;">start</span><span style="color:#D73A49;">..</span><span style="color:#24292E;">，含义是 [start，</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">∞）；</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-RUST vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">RUST</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">std：：ops：：RangeTo代表没有起始只有结束的范围，语法</span></span>
<span class="line"><span style="color:#E1E4E8;">为</span><span style="color:#F97583;">..</span><span style="color:#E1E4E8;">end，对有符号数的含义是（</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">∞，end），对无符号数的含义是[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">，end）；</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">std：：ops：：RangeTo代表没有起始只有结束的范围，语法</span></span>
<span class="line"><span style="color:#24292E;">为</span><span style="color:#D73A49;">..</span><span style="color:#24292E;">end，对有符号数的含义是（</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">∞，end），对无符号数的含义是[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">，end）；</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-RUST vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">RUST</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">std：：ops：：RangeFull代表没有上下限制的范围，语法为</span><span style="color:#F97583;">..</span><span style="color:#E1E4E8;">，对</span></span>
<span class="line"><span style="color:#E1E4E8;">有符号数的含义是（</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">∞，</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">∞），对无符号数的含义是[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">，</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">∞）。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">std：：ops：：RangeFull代表没有上下限制的范围，语法为</span><span style="color:#D73A49;">..</span><span style="color:#24292E;">，对</span></span>
<span class="line"><span style="color:#24292E;">有符号数的含义是（</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">∞，</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">∞），对无符号数的含义是[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">，</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">∞）。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-RUST vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">RUST</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">std：：ops：：</span><span style="color:#B392F0;">RangeInclusive</span><span style="color:#E1E4E8;">，语法为start</span><span style="color:#F97583;">..=</span><span style="color:#E1E4E8;">end，含义是[start，</span></span>
<span class="line"><span style="color:#E1E4E8;">end]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">std：：ops：：</span><span style="color:#6F42C1;">RangeInclusive</span><span style="color:#24292E;">，语法为start</span><span style="color:#D73A49;">..=</span><span style="color:#24292E;">end，含义是[start，</span></span>
<span class="line"><span style="color:#24292E;">end]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-RUST vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">RUST</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">std：：ops：：</span><span style="color:#B392F0;">RangeToInclusive</span><span style="color:#E1E4E8;">，语法为</span><span style="color:#F97583;">..=</span><span style="color:#E1E4E8;">end，对有符号数的含</span></span>
<span class="line"><span style="color:#E1E4E8;">义是（</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">∞，end]，对无符号数的含义是[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">，end]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">std：：ops：：</span><span style="color:#6F42C1;">RangeToInclusive</span><span style="color:#24292E;">，语法为</span><span style="color:#D73A49;">..=</span><span style="color:#24292E;">end，对有符号数的含</span></span>
<span class="line"><span style="color:#24292E;">义是（</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">∞，end]，对无符号数的含义是[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">，end]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>左闭右开： .. 左闭右闭: ..=</p><div class="language-rust vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">..</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">..</span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,42),e=[o];function t(r,c,E,y,i,u){return n(),a("div",null,e)}const b=s(p,[["render",t]]);export{F as __pageData,b as default};
