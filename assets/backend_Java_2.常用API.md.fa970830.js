import{_ as s,c as a,o as n,d as l}from"./app.9a745452.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"System","slug":"system","link":"#system","children":[{"level":3,"title":"获取执行耗时","slug":"获取执行耗时","link":"#获取执行耗时","children":[]},{"level":3,"title":"拷贝数组","slug":"拷贝数组","link":"#拷贝数组","children":[]}]},{"level":2,"title":"Runtime","slug":"runtime","link":"#runtime","children":[]},{"level":2,"title":"Object","slug":"object","link":"#object","children":[]},{"level":2,"title":"BigInteger","slug":"biginteger","link":"#biginteger","children":[]},{"level":2,"title":"BigDecimal","slug":"bigdecimal","link":"#bigdecimal","children":[]},{"level":2,"title":"正则","slug":"正则","link":"#正则","children":[{"level":3,"title":"有条件爬取","slug":"有条件爬取","link":"#有条件爬取","children":[]},{"level":3,"title":"贪婪/非贪婪爬取","slug":"贪婪-非贪婪爬取","link":"#贪婪-非贪婪爬取","children":[]},{"level":3,"title":"捕获分组","slug":"捕获分组","link":"#捕获分组","children":[]},{"level":3,"title":"非捕获分组","slug":"非捕获分组","link":"#非捕获分组","children":[]}]},{"level":2,"title":"JDK7 时间相关类","slug":"jdk7-时间相关类","link":"#jdk7-时间相关类","children":[{"level":3,"title":"Date 时间","slug":"date-时间","link":"#date-时间","children":[]},{"level":3,"title":"SimpleDateFormat 格式化","slug":"simpledateformat-格式化","link":"#simpledateformat-格式化","children":[]},{"level":3,"title":"Calendar 日历","slug":"calendar-日历","link":"#calendar-日历","children":[]}]},{"level":2,"title":"JDK8 时间相关类","slug":"jdk8-时间相关类","link":"#jdk8-时间相关类","children":[{"level":3,"title":"Date 时间","slug":"date-时间-1","link":"#date-时间-1","children":[]},{"level":3,"title":"时间格式化","slug":"时间格式化","link":"#时间格式化","children":[]},{"level":3,"title":"日历类","slug":"日历类","link":"#日历类","children":[]},{"level":3,"title":"工具类","slug":"工具类","link":"#工具类","children":[]}]},{"level":2,"title":"包装类","slug":"包装类","link":"#包装类","children":[]},{"level":2,"title":"Lambda 表达式","slug":"lambda-表达式","link":"#lambda-表达式","children":[]}],"relativePath":"backend/Java/2.常用API.md","lastUpdated":1678981877000}'),p={name:"backend/Java/2.常用API.md"},e=l(`<h2 id="system" tabindex="-1">System <a class="header-anchor" href="#system" aria-hidden="true">#</a></h2><h3 id="获取执行耗时" tabindex="-1">获取执行耗时 <a class="header-anchor" href="#获取执行耗时" aria-hidden="true">#</a></h3><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">long</span><span style="color:#A6ACCD;"> start </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> System</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">currentTimeMillis</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ... 执行点什么</span></span>
<span class="line"><span style="color:#C792EA;">long</span><span style="color:#A6ACCD;"> end </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> System</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">currentTimeMillis</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// end - start 为中间程序耗时</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="拷贝数组" tabindex="-1">拷贝数组 <a class="header-anchor" href="#拷贝数组" aria-hidden="true">#</a></h3><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">System</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">arraycopy</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">源数组</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 起始索引</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 目的数组</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 起始索引</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 拷贝个数</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="runtime" tabindex="-1">Runtime <a class="header-anchor" href="#runtime" aria-hidden="true">#</a></h2><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">Runtime</span><span style="color:#A6ACCD;"> r </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Runtime</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 或者</span></span>
<span class="line"><span style="color:#A6ACCD;">Runtime</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getRuntime</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Runtime</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getRuntime</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 获取系统当前运行环境</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">exit</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> status</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 停止虚拟机</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">avalableProcessors</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 获取 CPU 线程数</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">long</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">maxMemory</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 虚拟机能从系统中获取的总内存大小</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">long</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">totalMemory</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 已经从系统中获取的总内存大小</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">long</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">freeMemory</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 虚拟机剩余内存大小（byte）</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Process</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">exec</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> command</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 运行 cmd 命令</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="object" tabindex="-1">Object <a class="header-anchor" href="#object" aria-hidden="true">#</a></h2><p>Java 中的顶级父类，所有的类都直接或间接继承于 Object，其中的方法能被所有的子类访问</p><p>常用的几个方法：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">toString</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">equals</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Object</span><span style="color:#A6ACCD;"> obj</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 比较两个对象是否相等</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Object</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">clone</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 浅拷贝(克隆)，对象克隆时需要实现 Cloneable 接口，并且需要重写 Clone 方法，然后调用 super.clone()，如果需要深拷贝则需要自己实现或用第三方包</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>克隆分为浅拷贝和深拷贝 浅拷贝：基础数据类型拷贝值，引用数据类型拷贝地址 深拷贝：基础数据类型拷贝值，引用数据类型会重新创建对象并拷贝其中的值</p><h2 id="biginteger" tabindex="-1">BigInteger <a class="header-anchor" href="#biginteger" aria-hidden="true">#</a></h2><p>大整数</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BigInteger</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> num</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Random</span><span style="color:#A6ACCD;"> rnd</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 获取随机大整数 [0~2的num次方-1]</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BigInteger</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> val</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 获取指定大整数</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BigInteger</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> val</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> radix</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 获取指定进制大整数</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>如果 BigInteger 表示的数字没有超出 long(2^64) 的范围，可以用静态方法 valueOf 获取</li><li>如果 BigInteger 表示超出了 long 的范围，可以用构造方法获取</li><li>对象一旦创建，BigInteger 内部记录的值不能发生改变</li><li>只要进行计算都会产生一个新的 BigInteger 对象</li></ul><p>其还有一些方法，用来进行加减乘除等操作，add、subtract、multiply、divide、divideAndRemainder、equals、pow、max/min 等</p><p>底层以数组来进行存储，数组的最大长度是 int 的最大值，数组中每一位能表示的的数字是 -2147483648 ~ 2147483647。数组第 1 位是 1 或-1，表示正负值</p><h2 id="bigdecimal" tabindex="-1">BigDecimal <a class="header-anchor" href="#bigdecimal" aria-hidden="true">#</a></h2><p>大小数</p><p>| 类型 | 占用字节 | 总 bit 位 | 小数部分 bit 位 | | float| 4 | 32 | 23| | double | 8 | 64 | 52 |</p><p>如果小数部分再长就需要用这个 BigDecimal 了，在一些场景比如金融等精确计算场景就需要用这个 API 了</p><p>底层以数组进行存储，会先将值分割成单个字符串，每个字符串再转成 ASCⅡ 码放到数组里来进行存储</p><p>常见操作加减乘除，除的时候可以设置舍入模式，常见的就是四舍五入</p><h2 id="正则" tabindex="-1">正则 <a class="header-anchor" href="#正则" aria-hidden="true">#</a></h2><p>下面的这些正则内容，放到别的语言也适用~</p><p>String.matches(String regex)</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">abc</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> 只能是a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">c</span></span>
<span class="line"><span style="color:#89DDFF;">[^</span><span style="color:#A6ACCD;">abc</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> 除了abc以外的任意字符</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">zA</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Z</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> a到z和A到Z</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">d</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">m</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">]]</span><span style="color:#A6ACCD;"> a到d或m到p</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">z</span><span style="color:#89DDFF;">&amp;&amp;[</span><span style="color:#A6ACCD;">def</span><span style="color:#89DDFF;">]]</span><span style="color:#A6ACCD;"> d、</span><span style="color:#82AAFF;">e或f</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">交集</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">z</span><span style="color:#89DDFF;">&amp;&amp;[^</span><span style="color:#A6ACCD;">bc</span><span style="color:#89DDFF;">]]</span><span style="color:#A6ACCD;"> a到z，除了b和c</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">z</span><span style="color:#89DDFF;">&amp;&amp;[^</span><span style="color:#A6ACCD;">m</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">]]</span><span style="color:#A6ACCD;"> a到z，除了m到p</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">预定义字符：</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;"> 任意字符</span></span>
<span class="line"><span style="color:#A6ACCD;">\\d </span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">9</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">\\D 非数字</span><span style="color:#89DDFF;">[^</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">9</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">\\s 空白字符 </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">\\t\\n\\x0B\\f\\r</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">\\S 非空白字符 </span><span style="color:#89DDFF;">[^</span><span style="color:#A6ACCD;">\\s</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">\\w </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">zA</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Z_0</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">9</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">\\</span><span style="color:#C792EA;">W</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[^</span><span style="color:#A6ACCD;">\\w</span><span style="color:#89DDFF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">数量词：</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">?</span><span style="color:#A6ACCD;"> 一次或0次</span></span>
<span class="line"><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> 零次或多次</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> 一次或多次</span></span>
<span class="line"><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">n</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> 正好 n 次</span></span>
<span class="line"><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">n</span><span style="color:#89DDFF;">,}</span><span style="color:#A6ACCD;"> 至少 n 次</span></span>
<span class="line"><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">n</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">m</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> 至少n次但不超过m次</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>Pattern:表示正则表达式 Matcher:文本匹配器，按照正则表达式的规则去读取字符串，从头开始读，在大串中去找符合匹配规则的子串</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Java是95年问世的，Java8很好用</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 获取正则表达式对象，匹配所有 Java 及 Java后带两位数字的字符串</span></span>
<span class="line"><span style="color:#C792EA;">Pattern</span><span style="color:#A6ACCD;"> p </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Pattern</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">complie</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Java</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">d{0,2}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 获取文本匹配器对象</span></span>
<span class="line"><span style="color:#C792EA;">Matcher</span><span style="color:#A6ACCD;"> m </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> p</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">matcher</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">str</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 如果没有就返回false，有返回true，在底层记录子串的起始索引和结束索引+1</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// boolean b = m.find();</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 把截取的小串返回</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// String s1 = m.group()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 如果多次调用find，会继续往后读取内容。返回 Java、Java8</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">m</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">find</span><span style="color:#89DDFF;">())</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> s </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> m</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">group</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="有条件爬取" tabindex="-1">有条件爬取 <a class="header-anchor" href="#有条件爬取" aria-hidden="true">#</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">Java自从问世以来，企业中用的最多的就是 Java8、Java11，因为这两个都是长期支持版本，下一个长期支持版本是 Java17</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>1.不显示 Java 版本号</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 前面的 ?i 表示忽略大小写</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 后面的?理解为前面的数据Java</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// =表示在Java后面要跟随的数据，在获取的时候只获取前半部分</span></span>
<span class="line"><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> regex </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">((?i)Java)(?=8|11|17)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">Pattern</span><span style="color:#A6ACCD;"> p </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Pattern</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">compile</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">regex</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#C792EA;">Matcher</span><span style="color:#A6ACCD;"> m </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> p</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">matcher</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">m</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">find</span><span style="color:#89DDFF;">())</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">m</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">group</span><span style="color:#89DDFF;">());</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 打印4次Java</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>2.获取带版本号</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> regex </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">((?i)Java)(?:8|11|17)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>3.匹配不带版本号 8|11|17 的 Java 字符串</p><p>!是去除的意思</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> regex </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">((?i)Java)(?!8|11|17)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="贪婪-非贪婪爬取" tabindex="-1">贪婪/非贪婪爬取 <a class="header-anchor" href="#贪婪-非贪婪爬取" aria-hidden="true">#</a></h3><p>只写 + 或 * 表示贪婪匹配</p><p>+? 或 *? 表示非贪婪匹配</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">abbbbbbbbbbaaaaaaaaaa</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>1.按照 ab+的方式爬取 ab，b 尽可能多获取</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">ab</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 打印abbbbbbbbbb</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>2.按照 ab+的方式爬取 ab，b 尽可能少获取</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">ab</span><span style="color:#89DDFF;">+</span><span style="color:#89DDFF;font-style:italic;">?</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 打印 ab</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="捕获分组" tabindex="-1">捕获分组 <a class="header-anchor" href="#捕获分组" aria-hidden="true">#</a></h3><p>后续还要继续使用本组的数据，正则内部使用 \\\\组号 的形式，正则外部要匹配的话就用$组号(比如 replace 方法)</p><p>每一组都是由左括号为基准进行排序，最左边的左括号第一组，第二个左括号为第二组，以此类推</p><p>1.判断一个字符串的开始字符和结束字符是否一致，只考虑一个字符</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// a123a true;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// a123b false;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// (.)表示一个分组，.+表示中间是任意字符，\\\\1表示复用第一个分组</span></span>
<span class="line"><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> regex </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">(.).+</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>2.判断一个字符串的开始部分和结束部分是否一致</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// abc123abc true</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// abc123bcd false</span></span>
<span class="line"><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> regex </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">(.+).+</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>3.判断一个字符串的开始部分和结束部分是否一致？开始部分内的每个字符也需要一致</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// (.) 把首字符看作一组， \\\\2把首字符拿出来再次使用，*作用于\\\\2 表示重复内容出现0或多次</span></span>
<span class="line"><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> regex </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">((.)</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">2*).+</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>4.把重复的内容替换为单个</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 我要学学学编编编编编编程程程程程程程</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// (.) 把重复内容的第一个字符看作一组</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// \\\\1表示第一个字符再次出现</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// + 至少一次</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// $1 表示把正则中第一组内容再拿出来用</span></span>
<span class="line"><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> regex </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replaceAll</span><span style="color:#89DDFF;">((.)</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">+,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">$1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="非捕获分组" tabindex="-1">非捕获分组 <a class="header-anchor" href="#非捕获分组" aria-hidden="true">#</a></h3><p>仅仅只是把数据括起来，分组后不再需要本组数据，不占用组号</p><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>(?: 正则)</td><td>获取所有</td></tr><tr><td>(?= 正则)</td><td>获取前面部分</td></tr><tr><td>(?! 正则)</td><td>获取不是指定内容的前面部分</td></tr></tbody></table><h2 id="jdk7-时间相关类" tabindex="-1">JDK7 时间相关类 <a class="header-anchor" href="#jdk7-时间相关类" aria-hidden="true">#</a></h2><h3 id="date-时间" tabindex="-1">Date 时间 <a class="header-anchor" href="#date-时间" aria-hidden="true">#</a></h3><p>一个 Javabean 类，精确到毫秒</p><h3 id="simpledateformat-格式化" tabindex="-1">SimpleDateFormat 格式化 <a class="header-anchor" href="#simpledateformat-格式化" aria-hidden="true">#</a></h3><p>可以把时间格式化成喜欢的模式，还可以解析时间，类似于 dayjs</p><h3 id="calendar-日历" tabindex="-1">Calendar 日历 <a class="header-anchor" href="#calendar-日历" aria-hidden="true">#</a></h3><p>可以修改时间，比如加一个月减一个月的操作，传统方法也能做，但是这个对象更方便</p><h2 id="jdk8-时间相关类" tabindex="-1">JDK8 时间相关类 <a class="header-anchor" href="#jdk8-时间相关类" aria-hidden="true">#</a></h2><h3 id="date-时间-1" tabindex="-1">Date 时间 <a class="header-anchor" href="#date-时间-1" aria-hidden="true">#</a></h3><p>ZoneId 时区</p><p>Instant 时间戳</p><p>ZonedDateTime 带时区的时间</p><h3 id="时间格式化" tabindex="-1">时间格式化 <a class="header-anchor" href="#时间格式化" aria-hidden="true">#</a></h3><p>DateTimeFormatter</p><h3 id="日历类" tabindex="-1">日历类 <a class="header-anchor" href="#日历类" aria-hidden="true">#</a></h3><p>LocalDate 年月日</p><p>LocalTime 时分秒</p><p>LocalDateTime 年月日时分秒</p><h3 id="工具类" tabindex="-1">工具类 <a class="header-anchor" href="#工具类" aria-hidden="true">#</a></h3><p>Duration 时间间隔 秒、纳秒</p><p>Period 时间间隔 年月日</p><p>ChronoUnit 时间间隔 所有单位</p><h2 id="包装类" tabindex="-1">包装类 <a class="header-anchor" href="#包装类" aria-hidden="true">#</a></h2><p>基本数据类型对应的对象，JDK5 以后实现了自动装箱和自动拆箱。创建一个对象，把数据放到堆内存中，比如 Integer，其有一个成员变量 value</p><h2 id="lambda-表达式" tabindex="-1">Lambda 表达式 <a class="header-anchor" href="#lambda-表达式" aria-hidden="true">#</a></h2><ul><li>简化匿名内部类书写</li><li>有且只有一个抽象方法的接口叫函数式接口，接口上方可以加 @FunctionalInterface 注解</li></ul>`,88),o=[e];function t(r,c,i,y,D,C){return n(),a("div",null,o)}const F=s(p,[["render",t]]);export{d as __pageData,F as default};
