import{_ as s,o as a,c as i,R as e}from"./chunks/framework.KeRvpApV.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"rust/Rust社区工具/使用Rust管理Node.js版本.md","filePath":"rust/Rust社区工具/使用Rust管理Node.js版本.md","lastUpdated":1703409931000}'),n={name:"rust/Rust社区工具/使用Rust管理Node.js版本.md"},t=e(`<h2 id="使用-rust-切换-node-js-版本" tabindex="-1">使用 Rust 切换 Node.js 版本 <a class="header-anchor" href="#使用-rust-切换-node-js-版本" aria-label="Permalink to &quot;使用 Rust 切换 Node.js 版本&quot;">​</a></h2><p>这篇文章主要介绍一个使用 Rust 进行编写的一体化版本管理工具 Rtx，比如使用它来管理 Node.js 版本，它很简单易用，使用了它，就可以抛弃掉 nvm 了。</p><p>它拥有下面这些特性：</p><ul><li>它类似于 asdf 这个版本管理工具，完全兼容 asdf 的插件系统。</li><li>速度非常快——因为它使用 Rust 编写，并且优化了性能，比 asdf 要快 20 倍以上。</li><li>模糊匹配和使用别名——安装时只需要指定 “v20” 或 “lts” 版本就够了。Rtx 将计算出正确的版本，而不需要指定精确的版本。</li><li>兼容非常多的语言，只需要使用这一个工具去代替 gvm、 nvm、 rbenv 和 pyenv 这些工具就够了。</li></ul><p>那么 asdf 是啥?</p><blockquote><p>asdf 是一个命令行工具，可以在每个项目上管理多个语言运行时的版本。就像 gvm、 nvm、 rbenv 和 pyenv 等这些版本管理工具的一体化集合，你只需要安装对应语言的插件即可，也就是说有了 它，就不需要安装别的一堆工具了。</p></blockquote><p>那么 Rtx 也如 asdf 一样，可以直接作为替代品来使用，并且更强大。</p><p>虽然但是，它目前不支持 Windows 系统，但是官方已经在考虑支持中了。Linux 和 MacOS 的用户可以使用起来了，接下来我们就来说说如何安装和使用它吧</p><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><p>使用 curl 安装(推荐):</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://rtx.jdx.dev/install.sh</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sh</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>使用 npm 安装：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rtx-cli</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>使用 Rust cargo 来安装</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cargo-binstall</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> binstall</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rtx-cli</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="注册命令钩子" tabindex="-1">注册命令钩子 <a class="header-anchor" href="#注册命令钩子" aria-label="Permalink to &quot;注册命令钩子&quot;">​</a></h2><p>安装完成之后需要在 shell 中注册命令钩子</p><p>Bash:</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;eval &quot;$(rtx activate bash)&quot;&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.bashrc</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Zsh:</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;eval &quot;$(rtx activate zsh)&quot;&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ZDOTDIR-$HOME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}/.zshrc&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>安装完成之后，可以查看到版本号说明安装成功了</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rtx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="安装-node-js" tabindex="-1">安装 Node.js <a class="header-anchor" href="#安装-node-js" aria-label="Permalink to &quot;安装 Node.js&quot;">​</a></h2><p>安装 node 20 的长期支持版本并设置为全局默认</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rtx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> use</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node@20</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>安装完成之后在控制台输入下面命令能打印出对应的版本即可</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="常用命令" tabindex="-1">常用命令 <a class="header-anchor" href="#常用命令" aria-label="Permalink to &quot;常用命令&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>rtx install node@20.0.0  安装指定版本号</span></span>
<span class="line"><span>rtx install node@20      模糊匹配安装</span></span>
<span class="line"><span>rtx use node@20          在当前项目中使用 node 20.x 版本</span></span>
<span class="line"><span>rtx use -g node@20       在全局使用 node 20.x 版本</span></span>
<span class="line"><span></span></span>
<span class="line"><span>rtx use node@latest      在当前项目使用最新版 node</span></span>
<span class="line"><span>rtx use -g node@system   使用系统的 node 作为全局版本</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="其它" tabindex="-1">其它 <a class="header-anchor" href="#其它" aria-label="Permalink to &quot;其它&quot;">​</a></h2><p>上面只是提到了 node.js，除了 node.js 之外，比如 Java/Golang 等语言，只需要安装上它们对应的插件，然后就能够对其进行版本管理了。其它的还有一些配置化，定制化的能力就等需要使用到的时候再去探索好了。更多的能力大家也可以去参考下官方。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>这篇文章主要讲了这个工具的基础使用，但是对于我们日常来说其实也足够了，假如你现在同时在使用 Go/Node.js 或其它的多个语言，那么这个工具其实还是很不错的，可以让你省掉很多安装对应语言版本管理工具的流程。</p>`,34),l=[t];function p(h,r,d,o,c,u){return a(),i("div",null,l)}const g=s(n,[["render",p]]);export{b as __pageData,g as default};
