import{_ as a,o as e,c as t,Q as s}from"./chunks/framework.18ed7b43.js";const R=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"rust/心得/我为什么学 Rust.md","filePath":"rust/心得/我为什么学 Rust.md","lastUpdated":1691463013000}'),o={name:"rust/心得/我为什么学 Rust.md"},r=s('<h2 id="这里抛出一个问题" tabindex="-1">这里抛出一个问题 <a class="header-anchor" href="#这里抛出一个问题" aria-label="Permalink to &quot;这里抛出一个问题&quot;">​</a></h2><p><strong>作为一个前端为什么要去学习 Rust ？</strong></p><p>这是个好问题，有人可能觉得前端学习 Rust 意义不大，学习成本高，投入产出比低啥的，JavaScript、TypeScript 这些前端语言还没搞明白呢，为什么还要去学一门这么难的新语言？</p><p>那么今天我就谈谈我自己对于这个问题的看法~，主要是分为 5 点：</p><ul><li>性能</li><li>跨平台特性</li><li>安全性</li><li>职业视野</li><li>职业竞争力</li></ul><h3 id="性能" tabindex="-1">性能 <a class="header-anchor" href="#性能" aria-label="Permalink to &quot;性能&quot;">​</a></h3><p>Rust 可以给 Node.js 提供一个性能逃生通道，当我们使用 Node.js 遇到性能瓶颈或 CPU 密集计算场景的时候，便可以使用 Rust 编写 Native Addon 解决这个问题了，Native Addon 就是一个二进制文件，也就是 xxx.node 文件，比如 swc(对应 babel)、Rspack(对应Webpack)、Rome(对应 eslint、prettier、babel、webpack 等，目标是代替我们所熟悉的所有前端工具链...)，上面提到的工具链就都是使用 Rust 编写的，性能比 Node.js 对应功能的包都有了极大的提高，同时 Rust 也是支持多线程的，你编写的多线程代码在 Node.js 中一样可以跑，这就可以解决了 Node.js 不擅长 CPU 密集型的问题。在前端架构领域目前 Rust 已经差不多是标配了，阿里、字节内部的前端基建目前都开始基于 Rust 去重构了。</p><h3 id="跨平台" tabindex="-1">跨平台 <a class="header-anchor" href="#跨平台" aria-label="Permalink to &quot;跨平台&quot;">​</a></h3><p>可以编写高性能且支持跨平台的 WebAssembly 扩展，可以在浏览器、IOT 嵌入式设备、服务端环境等地方使用，并且也拥有很不错的性能；和上面提到的 Native Addon 不一样， Native Addon 在不同的平台上都需要单独的进行编译，不支持跨平台；但是 WebAssembly 不一样，虽然它的性能没 Native Addon 好，但是跨平台成本很低，我编写的一份代码在 Node.js 中执行没问题，在 Deno 中跑也没问题，在 Java 或者 Go 中跑也都没问题，甚至在单片机也可以运行，只要引入对应的 Wasm 运行时即可。现在 Docker 也已经有 WebAssembly 版本了；同时 Rust 也是目前编写 WebAssembly 最热门的语言，因为它没有垃圾回收，性能高，并且有一个超好用的包管理器 cargo。</p><h3 id="安全" tabindex="-1">安全 <a class="header-anchor" href="#安全" aria-label="Permalink to &quot;安全&quot;">​</a></h3><p>Rust 编译器真的是事无巨细，它保证你编写的代码不会出低级错误，比如一些类型上的错误和内存分配上的错误，基本上只要 Rust 代码能够编译通过，就可以安心上线，在服务端、操作系统等领域来说这也是个很好的特性，Linux 系统和安卓系统内核都已经开始使用 Rust ，这还信不过嘛？</p><h3 id="视野" tabindex="-1">视野 <a class="header-anchor" href="#视野" aria-label="Permalink to &quot;视野&quot;">​</a></h3><p>Rust 可以提升自己在服务端领域的视野，Rust 不同于 Node.js 这个使用动态 JS 语言的运行时，它是一门正儿八经的静态编译型编程语言，并且没有垃圾回收，可以让我们掌握和理解计算机的一些底层工作机制，比如内存是如何分配和释放的，Rust 中使用所有权、生命周期等概念来保证内存安全，这对我们对于编程的理解也可以进一步提升，很多人说学习了 Rust 之后对自己编写其它语言的代码也有了更深的理解，毕竟计算机底层的概念都是相通的，开阔自己的编程思维。</p><h3 id="职业竞争力" tabindex="-1">职业竞争力 <a class="header-anchor" href="#职业竞争力" aria-label="Permalink to &quot;职业竞争力&quot;">​</a></h3><p>这个问题简单，你比别人多一门技能，比如 WebAssembly 和 Native Addon 都可以作为 Node.js 性能优化的一种手段，面试的时候说你会使用 Rust 解决 Node.js 性能问题，这不是比别人多一些竞争力吗？面试官那肯定也会觉得你顶呱呱~ 另外虽然目前 Rust 的工作机会比较少，但是也不代表没有，阿里和字节目前都有关于前端基建的岗位，会 Rust 是加分项，另外 Rust 在 TIOBE 编程语言榜排名中已经冲进了前 20，今年 6 月份是第 20 名，7 月份是第 17 名，流行度开始慢慢上来了，我相信以后工作机会也会越来越多的。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>不过，总的来说，这还是得看自己个人的学习能力，学有余力的时候可以学习一下 Rust，我自己不是 Rust 吹啊，我学习 Rust 的过程中真的觉得很有趣，因为里面的很多概念在前端领域中都是接触不到的，学了之后真的像是打开了新世界的大门，包括可以去看 Deno 的源码了，可以了解到一个 Js 运行时是怎么进行工作的，这些都是与我们前端息息相关的东西，即使哪天不做前端了，可以去转服务端或嵌入式方向，起码编程语言这一关不需要费多大力气了，Rust 是目前唯一一门从计算机底层到应用层都有落地应用的语言。不多说了，学就完事了，技多不压身嘛</p>',17),i=[r];function d(l,u,n,c,h,p){return e(),t("div",null,i)}const b=a(o,[["render",d]]);export{R as __pageData,b as default};
