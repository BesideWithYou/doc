import{_ as a,o as e,c as t,R as r}from"./chunks/framework.KeRvpApV.js";const m=JSON.parse('{"title":"常用 crates","description":"","frontmatter":{"title":"常用 crates"},"headers":[],"relativePath":"rust/Rust基础/1.常用crates.md","filePath":"rust/Rust基础/1.常用crates.md","lastUpdated":1701789883000}'),l={name:"rust/Rust基础/1.常用crates.md"},i=r('<h2 id="crate-io" tabindex="-1">crate.io <a class="header-anchor" href="#crate-io" aria-label="Permalink to &quot;crate.io&quot;">​</a></h2><p>Rust 包管理网站，类似于 NPM，<a href="https://crates.io/" target="_blank" rel="noreferrer">Rust crate.io</a></p><h2 id="错误处理" tabindex="-1">错误处理 <a class="header-anchor" href="#错误处理" aria-label="Permalink to &quot;错误处理&quot;">​</a></h2><ul><li>thiserror</li><li>anyhow</li></ul><p>如果你想要设计自己的错误类型，同时给调用者提供具体的信息时，就使用 <code>thiserror</code>; 当你在开发一个三方库代码时或者自己应用中使用，就使用 <code>anyhow</code></p><h2 id="时间和日期处理" tabindex="-1">时间和日期处理 <a class="header-anchor" href="#时间和日期处理" aria-label="Permalink to &quot;时间和日期处理&quot;">​</a></h2><ul><li>chrono</li></ul><h2 id="网络请求" tabindex="-1">网络请求 <a class="header-anchor" href="#网络请求" aria-label="Permalink to &quot;网络请求&quot;">​</a></h2><ul><li>reqwest</li></ul><h2 id="数字处理" tabindex="-1">数字处理 <a class="header-anchor" href="#数字处理" aria-label="Permalink to &quot;数字处理&quot;">​</a></h2><ul><li>num</li><li>rand 随机数</li></ul><h2 id="命令行" tabindex="-1">命令行 <a class="header-anchor" href="#命令行" aria-label="Permalink to &quot;命令行&quot;">​</a></h2><ul><li>clap 以声明方式或过程方式创建带有所有附加功能的命令行解析器</li></ul><h2 id="webassembly-相关" tabindex="-1">webassembly 相关 <a class="header-anchor" href="#webassembly-相关" aria-label="Permalink to &quot;webassembly 相关&quot;">​</a></h2><ul><li>wasm-pack 开发 wasm 时必备的命令行工具，打包/初始化项目</li><li>wasm-bindgen 提供 JS API 绑定，暴露方法供 JS 使用</li><li>serde-wasm-bindgen Serde 适配器，用于 wasm-bindgen，用于在 Rust 和 JS 之间传输数据使用</li></ul>',15),s=[i];function o(c,n,h,d,u,_){return e(),t("div",null,s)}const p=a(l,[["render",o]]);export{m as __pageData,p as default};
