import{_ as s,c as a,o as n,N as l}from"./chunks/framework.3202de66.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"backend/MySQL数据库/3.SQL必知必会读书笔记.md","lastUpdated":1679932048000}'),p={name:"backend/MySQL数据库/3.SQL必知必会读书笔记.md"},e=l(`<h2 id="简述" tabindex="-1">简述 <a class="header-anchor" href="#简述" aria-label="Permalink to &quot;简述&quot;">​</a></h2><p>本文只会记录我觉得有收获的地方</p><h2 id="去重" tabindex="-1">去重 <a class="header-anchor" href="#去重" aria-label="Permalink to &quot;去重&quot;">​</a></h2><p>DISTINCT 它指示数据库只返回不同的值，可以达到去重的目的。如果使用 DISTINCT 关键字，它必须直接放在列名的前面</p><blockquote><p>不能部分使用 DISTINCT。DISTINCT 关键字作用于所有的列，不仅仅是跟在其后的那一列</p></blockquote><h2 id="分页" tabindex="-1">分页 <a class="header-anchor" href="#分页" aria-label="Permalink to &quot;分页&quot;">​</a></h2><p>LIMIT 和 OFFSET 一般用于做数据分页，但是在数据量大的时候会有性能问题。 建议在需要分页的表中使用自动递增的主键，然后使用 id 查询来代替 LIMIT/OFFSET 来做分页</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> table_name </span><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> id </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">LIMIT</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>LIMIT 指定返回的行数。LIMIT 带的 OFFSET 指定从哪儿开始</p><p>假如 Products 表中只有 9 种产品， LIMIT 5 OFFSET 5 只返回 4 行数据</p><p>LIMIT x, y 分句表示: 跳过 x 条数据，读取 y 条数据</p><blockquote><p>第一个被检索的行是第 0 行，而不是第 1 行</p></blockquote><blockquote><p>MySQL、MariaDB 和 SQLite 可以把 LIMIT 4 OFFSET 3 语句简化为 LIMIT 3,4。使用这个语法，逗号之前的值对应 &gt; OFFSET，逗号之后的值对应 LIMIT（反着的，要小心）。</p></blockquote><h2 id="排序" tabindex="-1">排序 <a class="header-anchor" href="#排序" aria-label="Permalink to &quot;排序&quot;">​</a></h2><p>ORDER BY 可以根据某个/多个字段来进行排序</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> prod_id, prod_price, prod_name</span></span>
<span class="line"><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> Products</span></span>
<span class="line"><span style="color:#F78C6C;">ORDER BY</span><span style="color:#A6ACCD;"> prod_price, prod_name;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>对 prod_name 列以字母顺序排序</p><blockquote><p>在指定一条 ORDER BY 子句时，应该保证它是 SELECT 语句中最后一条子句，就是要放到语句的最后</p></blockquote><h3 id="升序降序排序" tabindex="-1">升序降序排序 <a class="header-anchor" href="#升序降序排序" aria-label="Permalink to &quot;升序降序排序&quot;">​</a></h3><p>添加 DESC(DESCENDING) 关键字。ASC 是默认的升序（A-Z 排序）</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> prod_id, prod_price, prod_name</span></span>
<span class="line"><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> Products</span></span>
<span class="line"><span style="color:#F78C6C;">ORDER BY</span><span style="color:#A6ACCD;"> prod_price </span><span style="color:#F78C6C;">DESC</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><blockquote><p>如果想在多个列上进行降序排序，必须对每一列指定 DESC 关键字</p></blockquote><h2 id="过滤" tabindex="-1">过滤 <a class="header-anchor" href="#过滤" aria-label="Permalink to &quot;过滤&quot;">​</a></h2><p>使用 WHERE 关键字 + 条件</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> prod_name, prod_price</span></span>
<span class="line"><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> Products</span></span>
<span class="line"><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> prod_price </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">49</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><blockquote><p>在同时使用 ORDER BY 和 WHERE 子句时，应该让 ORDER BY 位于 WHERE 之后，否则将会产生错误</p></blockquote><p>条件操作符就是 &gt;、 =、 &lt; 、 &gt;= 、 &lt;=、 !&lt;、!= 或 &lt;&gt;、!&gt;、BETWEEN xx AND xx、 IS NULL 这些</p><h2 id="and-、or、in-、not-运算符" tabindex="-1">AND 、OR、IN 、NOT 运算符 <a class="header-anchor" href="#and-、or、in-、not-运算符" aria-label="Permalink to &quot;AND 、OR、IN 、NOT 运算符&quot;">​</a></h2><p>AND 同时满足</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> prod_id, prod_price, prod_name </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> Products</span></span>
<span class="line"><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> vend_id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">DLL01</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">AND</span><span style="color:#A6ACCD;"> prod_price </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>OR 其中一个满足</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> prod_id, prod_price, prod_name</span></span>
<span class="line"><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> Products</span></span>
<span class="line"><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> vend_id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">DLL01</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">OR</span><span style="color:#A6ACCD;"> vend_id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">BRS01</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>IN 操作符用来指定条件范围，范围中的每个条件都可以进行匹配，可以完成 OR 的功能(IN 操作符一般比一组 OR 操作符执行得更快)</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> prod_name, prod_price</span></span>
<span class="line"><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> Products</span></span>
<span class="line"><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> vend_id </span><span style="color:#F78C6C;">IN</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">DLL01</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">BRS01</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#F78C6C;">ORDER BY</span><span style="color:#A6ACCD;"> prod_name;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>和 != 功能一样，简单的子句中看不出它的啥优势，但在更复杂的子句中，NOT 是非常有用的。例如，在与 IN 操作符联合使用时，NOT 可以非常简单地找出与条件列表不匹配的行</p><h2 id="like-模糊匹配" tabindex="-1">LIKE 模糊匹配 <a class="header-anchor" href="#like-模糊匹配" aria-label="Permalink to &quot;LIKE 模糊匹配&quot;">​</a></h2><h3 id="百分号通配符" tabindex="-1">%百分号通配符 <a class="header-anchor" href="#百分号通配符" aria-label="Permalink to &quot;%百分号通配符&quot;">​</a></h3><p>%代表搜索模式中给定位置的 0 个、1 个或多个字符</p><p>比如找出所有以词 Fish 起头的产品</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> prod_id, prod_name</span></span>
<span class="line"><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> Products</span></span>
<span class="line"><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> prod_name </span><span style="color:#F78C6C;">LIKE</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Fish%</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>通配符可在搜索模式中的任意位置使用，并且可以使用多个通配符</p><p><code>搜索模式&#39;%bean bag%&#39;表示匹配任何位置上包含文本 bean bag 的值</code></p><blockquote><p>%不匹配 NULL，比如子句 WHERE prod_name LIKE &#39;%&#39;不会匹配产品名称为 NULL 的行。</p></blockquote><h3 id="下划线通配符" tabindex="-1">下划线通配符 <a class="header-anchor" href="#下划线通配符" aria-label="Permalink to &quot;下划线通配符&quot;">​</a></h3><p>下划线的用途与%一样，但它只匹配单个字符，而不是多个字符。与%能匹配多个字符不同，_总是刚好匹配一个字符，不能多也不能少</p><h3 id="使用技巧" tabindex="-1">使用技巧 <a class="header-anchor" href="#使用技巧" aria-label="Permalink to &quot;使用技巧&quot;">​</a></h3><p>通配符搜索一般比前面讨论的其他搜索要耗费更长的处理时间</p><ul><li>不要过度使用通配符。如果其他操作符能达到相同的目的，应该使用 其他操作符。</li><li>在确实需要使用通配符时，也尽量不要把它们用在搜索模式的开始 处。把通配符置于开始处，搜索起来是最慢的。</li><li>仔细注意通配符的位置。如果放错地方，可能不会返回想要的数据</li></ul><h2 id="计算字段" tabindex="-1">计算字段 <a class="header-anchor" href="#计算字段" aria-label="Permalink to &quot;计算字段&quot;">​</a></h2><p>在 SQL 语句内可完成的许多转换和格式化工作都可以直接在客户端应用程序内完成。但一般来说，在数据库服务器上完成这些操作比在客户端中完成要快得多。所以在数据库中的计算就很有用</p><h3 id="拼接" tabindex="-1">拼接 <a class="header-anchor" href="#拼接" aria-label="Permalink to &quot;拼接&quot;">​</a></h3><p>SQL Server 使用+号。DB2、Oracle、PostgreSQL 和 SQLite 使用||</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> vend_name </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> vend_country </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">)</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> Vendors</span></span>
<span class="line"><span style="color:#F78C6C;">ORDER BY</span><span style="color:#A6ACCD;"> vend_name</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>MySQL 或 MariaDB，使用 Concat 函数</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Concat</span><span style="color:#A6ACCD;">(vend_name, </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;"> (</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">, vend_country, </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">)</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> Vendors</span></span>
<span class="line"><span style="color:#F78C6C;">ORDER BY</span><span style="color:#A6ACCD;"> vend_name;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>可以输出比如： test (China) 这样的字段</p><h3 id="去除空格" tabindex="-1">去除空格 <a class="header-anchor" href="#去除空格" aria-label="Permalink to &quot;去除空格&quot;">​</a></h3><p>RTRIM() 函数可以去掉值右边的所有空格，LTRIM() 去掉字符串左边的空格以及 TRIM() 去掉字符 串左右两边的空格。</p><h3 id="别名" tabindex="-1">别名 <a class="header-anchor" href="#别名" aria-label="Permalink to &quot;别名&quot;">​</a></h3><p>SELECT 语句可以很好地拼接地址字段。但是， 这个新计算列的名字是什么呢？实际上它没有名字，它只是一个值，为了解决这个问题，SQL 支持列别名</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Concat</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">RTrim</span><span style="color:#A6ACCD;">(vend_name), </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;"> (</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">RTrim</span><span style="color:#A6ACCD;">(vend_country), </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">)</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#F78C6C;">AS</span><span style="color:#A6ACCD;"> vend_title</span></span>
<span class="line"><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> Vendors</span></span>
<span class="line"><span style="color:#F78C6C;">ORDER BY</span><span style="color:#A6ACCD;"> vend_name;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-label="Permalink to &quot;函数&quot;">​</a></h2><table><thead><tr><th>函数</th><th>语法</th></tr></thead><tbody><tr><td>提取字符串的组成 部分</td><td>DB2、Oracle、PostgreSQL 和 SQLite 使用 SUBSTR()；MariaDB、 MySQL 和 SQL Server 使用 SUBSTRING()</td></tr><tr><td>数据类型转换</td><td>Oracle 使用多个函数，每种类型的转换有一个函数；DB2 和 PostgreSQL 使用 CAST()；MariaDB、MySQL 和 SQL Server 使用 CONVERT()</td></tr><tr><td>取当前日期</td><td>DB2 和 PostgreSQL 使用 CURRENT_DATE；MariaDB 和 MySQL 使用 CURDATE()；Oracle 使用 SYSDATE；SQL Server 使用 GETDATE()； SQLite 使用 DATE()</td></tr></tbody></table><p>常用的一些函数和说明</p><table><thead><tr><th>函 数</th><th>说明</th></tr></thead><tbody><tr><td>LEFT()（或使用子字符串函数）</td><td>返回字符串左边的字符</td></tr><tr><td>RIGHT()（或使用子字符串函数）</td><td>返回字符串右边的字符</td></tr><tr><td>LENGTH()（也使用 DATALENGTH()或 LEN()）</td><td>返回字符串的长度</td></tr><tr><td>LOWER()</td><td>将字符串转换为小写</td></tr><tr><td>SUBSTR()或 SUBSTRING()</td><td>提取字符串的组成部分</td></tr><tr><td>SOUNDEX()</td><td>返回字符串的 SOUNDEX 值。SOUNDEX 是一个将任何文 本串转换为描述其语音表示的字母数字模式的算法，读音类似的字符串也会被返回</td></tr><tr><td>UPPER()</td><td>将字符串转换为大写</td></tr></tbody></table><h3 id="日期" tabindex="-1">日期 <a class="header-anchor" href="#日期" aria-label="Permalink to &quot;日期&quot;">​</a></h3><p>DB2，MySQL 和 MariaDB 用户可使用名为 YEAR()的函数从日期中提取 年份</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> order_num</span></span>
<span class="line"><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> Orders</span></span>
<span class="line"><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">YEAR</span><span style="color:#A6ACCD;">(order_date) </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2020</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="数值处理" tabindex="-1">数值处理 <a class="header-anchor" href="#数值处理" aria-label="Permalink to &quot;数值处理&quot;">​</a></h3><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>ABS()</td><td>返回一个数的绝对值</td></tr><tr><td>COS()</td><td>返回一个角度的余弦</td></tr><tr><td>EXP()</td><td>返回一个数的指数值</td></tr><tr><td>PI()</td><td>返回圆周率 π 的值</td></tr><tr><td>SIN()</td><td>返回一个角度的正弦</td></tr><tr><td>SQRT()</td><td>返回一个数的平方根</td></tr><tr><td>TAN()</td><td>返回一个角度的正切</td></tr></tbody></table><h2 id="数据汇总-聚集函数" tabindex="-1">数据汇总(聚集函数) <a class="header-anchor" href="#数据汇总-聚集函数" aria-label="Permalink to &quot;数据汇总(聚集函数)&quot;">​</a></h2><p>与前一章介绍的数据处理函数不同，SQL 的聚集函数 在各种主要 SQL 实现中得到了相当一致的支持</p><table><thead><tr><th>函 数</th><th>说 明</th></tr></thead><tbody><tr><td>AVG()</td><td>返回某列的平均值</td></tr><tr><td>COUNT()</td><td>返回某列的行数</td></tr><tr><td>MAX()</td><td>返回某列的最大值</td></tr><tr><td>MIN()</td><td>返回某列的最小值</td></tr><tr><td>SUM()</td><td>返回某列值之和</td></tr></tbody></table><h3 id="avg" tabindex="-1">AVG <a class="header-anchor" href="#avg" aria-label="Permalink to &quot;AVG&quot;">​</a></h3><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">AVG</span><span style="color:#A6ACCD;">(prod_price) </span><span style="color:#F78C6C;">AS</span><span style="color:#A6ACCD;"> avg_price</span></span>
<span class="line"><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> Products;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">avg_price</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">-------------</span></span>
<span class="line"><span style="color:#F78C6C;">6</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">823333</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><blockquote><p>AVG()只能用来确定特定数值列的平均值，而且列名必须作为函数参 数给出。为了获得多个列的平均值，必须使用多个 AVG()函数</p><p>AVG()函数忽略列值为 NULL 的行。</p></blockquote><h3 id="count" tabindex="-1">COUNT <a class="header-anchor" href="#count" aria-label="Permalink to &quot;COUNT&quot;">​</a></h3><p>COUNT()函数有两种使用方式：</p><ul><li>使用 COUNT(*)对表中行的数目进行计数，不管表列中包含的是空值 （NULL）还是非空值。</li><li>使用 COUNT(column)对特定列中具有值的行进行计数，忽略 NULL 值。</li></ul><h3 id="max" tabindex="-1">MAX <a class="header-anchor" href="#max" aria-label="Permalink to &quot;MAX&quot;">​</a></h3><p>虽然 MAX()一般用来找出最大的数值或日期值，但许多（并非所有） DBMS 允许将它用来返回任意列中的最大值，包括返回文本列中的最 大值。在用于文本数据时，MAX()返回按该列排序后的最后一行。</p><blockquote><p>MAX()函数忽略列值为 NULL 的行</p></blockquote><h3 id="min" tabindex="-1">MIN <a class="header-anchor" href="#min" aria-label="Permalink to &quot;MIN&quot;">​</a></h3><p>虽然 MIN()一般用来找出最小的数值或日期值，但许多（并非所有） DBMS 允许将它用来返回任意列中的最小值，包括返回文本列中的最 小值。在用于文本数据时，MIN()返回该列排序后最前面的行。</p><blockquote><p>MIN()函数忽略列值为 NULL 的行</p></blockquote><h3 id="sum" tabindex="-1">SUM <a class="header-anchor" href="#sum" aria-label="Permalink to &quot;SUM&quot;">​</a></h3><p>SUM()也可以用来合计计算值。在下面的例子中，合计每项物品的 item_price*quantity，得出总的订单金额：</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SUM</span><span style="color:#A6ACCD;">(item_price</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">quantity) </span><span style="color:#F78C6C;">AS</span><span style="color:#A6ACCD;"> total_price</span></span>
<span class="line"><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> OrderItems</span></span>
<span class="line"><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> order_num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20005</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">total_price</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">----------</span></span>
<span class="line"><span style="color:#F78C6C;">1648</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">0000</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="聚集不同的值" tabindex="-1">聚集不同的值 <a class="header-anchor" href="#聚集不同的值" aria-label="Permalink to &quot;聚集不同的值&quot;">​</a></h3><p>下面的例子使用 AVG()函数返回特定供应商提供的产品的平均价格。它 与上面的 SELECT 语句相同，但使用了 DISTINCT 参数，因此平均值只考 虑各个不同的价格：</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">AVG</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">DISTINCT</span><span style="color:#A6ACCD;"> prod_price) </span><span style="color:#F78C6C;">AS</span><span style="color:#A6ACCD;"> avg_price</span></span>
<span class="line"><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> Products</span></span>
<span class="line"><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> vend_id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">DLL01</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">avg_price</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">-----------</span></span>
<span class="line"><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">2400</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><blockquote><p>如果指定列名，则 DISTINCT 只能用于 COUNT()。DISTINCT 不能用 于 COUNT(*)。类似地，DISTINCT 必须使用列名，不能用于计算或表 达式</p></blockquote><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">COUNT</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">) </span><span style="color:#F78C6C;">AS</span><span style="color:#A6ACCD;"> num_items,</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MIN</span><span style="color:#A6ACCD;">(prod_price) </span><span style="color:#F78C6C;">AS</span><span style="color:#A6ACCD;"> price_min,</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MAX</span><span style="color:#A6ACCD;">(prod_price) </span><span style="color:#F78C6C;">AS</span><span style="color:#A6ACCD;"> price_max,</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">AVG</span><span style="color:#A6ACCD;">(prod_price) </span><span style="color:#F78C6C;">AS</span><span style="color:#A6ACCD;"> price_avg</span></span>
<span class="line"><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> Products;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">num_items price_min price_max price_avg</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">---------- --------------- --------------- ---------</span></span>
<span class="line"><span style="color:#F78C6C;">9</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">4900</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">11</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">9900</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">6</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">823333</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="分组数据" tabindex="-1">分组数据 <a class="header-anchor" href="#分组数据" aria-label="Permalink to &quot;分组数据&quot;">​</a></h2><p>这一课介绍如何分组数据，以便汇总表内容的子集。这涉及两个新 SELECT 语句子句：GROUP BY 子句和 HAVING 子句</p><h3 id="创建分组" tabindex="-1">创建分组 <a class="header-anchor" href="#创建分组" aria-label="Permalink to &quot;创建分组&quot;">​</a></h3><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> vend_id, </span><span style="color:#82AAFF;">COUNT</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">) </span><span style="color:#F78C6C;">AS</span><span style="color:#A6ACCD;"> num_prods</span></span>
<span class="line"><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> Products</span></span>
<span class="line"><span style="color:#F78C6C;">GROUP BY</span><span style="color:#A6ACCD;"> vend_id;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">vend_id num_prods</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">------- ---------</span></span>
<span class="line"><span style="color:#A6ACCD;">BRS01 </span><span style="color:#F78C6C;">3</span></span>
<span class="line"><span style="color:#A6ACCD;">DLL01 </span><span style="color:#F78C6C;">4</span></span>
<span class="line"><span style="color:#A6ACCD;">FNG01 </span><span style="color:#F78C6C;">2</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>上面的 SELECT 语句指定了两个列：vend_id 包含产品供应商的 ID， num_prods 为计算字段（用 COUNT(*)函数建立）。GROUP BY 子句指示 DBMS 按 vend_id 排序并分组数据。这就会对每个 vend_id 而不是整个 表计算 num_prods 一次</p><h3 id="过滤分组" tabindex="-1">过滤分组 <a class="header-anchor" href="#过滤分组" aria-label="Permalink to &quot;过滤分组&quot;">​</a></h3><p>目前为止所学过的 所有类型的 WHERE 子句都可以用 HAVING 来替代。唯一的差别是，WHERE 过滤行，而 HAVING 过滤分组</p><blockquote><p>之前学习了 WHERE 子句的条件（包括通配符条 件和带多个操作符的子句）。学过的这些有关 WHERE 的所有技术和选 项都适用于 HAVING。它们的句法是相同的，只是关键字有差别</p></blockquote><p>过滤 COUNT(*) &gt;= 2（两个以上订单）的那些分组</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> cust_id, </span><span style="color:#82AAFF;">COUNT</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">) </span><span style="color:#F78C6C;">AS</span><span style="color:#A6ACCD;"> orders</span></span>
<span class="line"><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> Orders</span></span>
<span class="line"><span style="color:#F78C6C;">GROUP BY</span><span style="color:#A6ACCD;"> cust_id</span></span>
<span class="line"><span style="color:#F78C6C;">HAVING</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">COUNT</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">cust_id    orders</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">---------- -----------</span></span>
<span class="line"><span style="color:#F78C6C;">1000000001</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><blockquote><p>另一种理解方法，WHERE 在数据分组前进行过滤，HAVING 在数 据分组后进行过滤</p></blockquote><p>WHERE 子句过滤所有 prod_price 至少为 4 的行，然后按 vend_id 分组数据，HAVING 子句过滤计数为 2 或 2 以上的分组</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> vend_id, </span><span style="color:#82AAFF;">COUNT</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">) </span><span style="color:#F78C6C;">AS</span><span style="color:#A6ACCD;"> num_prods</span></span>
<span class="line"><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> Products</span></span>
<span class="line"><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> prod_price </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span></span>
<span class="line"><span style="color:#F78C6C;">GROUP BY</span><span style="color:#A6ACCD;"> vend_id</span></span>
<span class="line"><span style="color:#F78C6C;">HAVING</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">COUNT</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">vend_id num_prods</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">------- -----------</span></span>
<span class="line"><span style="color:#A6ACCD;">BRS01 	</span><span style="color:#F78C6C;">3</span></span>
<span class="line"><span style="color:#A6ACCD;">FNG01 	</span><span style="color:#F78C6C;">2</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="分组和排序" tabindex="-1">分组和排序 <a class="header-anchor" href="#分组和排序" aria-label="Permalink to &quot;分组和排序&quot;">​</a></h3><table><thead><tr><th>ORDER BY</th><th>GROUP BY</th></tr></thead><tbody><tr><td>对产生的输出排序<br>任意列都可以使用（甚至非选择的列也可以使用）<br>不一定需要</td><td>对行分组，但输出可能不是分组的顺序<br>只可能使用选择列或表达式列，而且必须使用每个选择列 表达式。<br>如果与聚集函数一起使用列（或表达式），则必须使用</td></tr></tbody></table><blockquote><p>一般在使用 GROUP BY 子句时，应该也给出 ORDER BY 子句。这是保 证数据正确排序的唯一方法。千万不要仅依赖 GROUP BY 排序数据</p></blockquote><h2 id="子查询" tabindex="-1">子查询 <a class="header-anchor" href="#子查询" aria-label="Permalink to &quot;子查询&quot;">​</a></h2><p>在 SELECT 语句中，子查询总是从内向外处理，即从最内部嵌套的子句开始执行</p><p>订单物品存储在 OrderItems 表，订单是 Order 表，客户信息是 Customers 表，现在要查出列出订购物品 RGAN01 的所有顾客的信息</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> cust_name, cust_contact</span></span>
<span class="line"><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> Customers</span></span>
<span class="line"><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> cust_id </span><span style="color:#F78C6C;">IN</span><span style="color:#A6ACCD;"> (</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> cust_id </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> Orders </span><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> order_num </span><span style="color:#F78C6C;">IN</span><span style="color:#A6ACCD;"> (</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> order_num </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> OrderItems </span><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> prod_id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">RGAN01</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    )</span></span>
<span class="line"><span style="color:#A6ACCD;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">cust_name             cust_contact</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">------------          --------------------</span></span>
<span class="line"><span style="color:#A6ACCD;">Fun4All Denise        L. Stephens</span></span>
<span class="line"><span style="color:#A6ACCD;">The Toy Store         Kim Howard</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><blockquote><p>作为子查询的 SELECT 语句只能查询单个列。企图检索多个列将返回 错误</p></blockquote><p>对于能嵌套的子查询的数目没有限制，不过在实际使用时由于性 能的限制，不能嵌套太多的子查询。上面的 SQL 还可以进行优化</p><h3 id="作为计算字段使用子查询" tabindex="-1">作为计算字段使用子查询 <a class="header-anchor" href="#作为计算字段使用子查询" aria-label="Permalink to &quot;作为计算字段使用子查询&quot;">​</a></h3><p>使用子查询的另一方法是创建计算字段。假如需要显示 Customers 表中 每个顾客的订单总数。订单与相应的顾客 ID 存储在 Orders 表中</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> cust_name, cust_state,</span></span>
<span class="line"><span style="color:#A6ACCD;"> (</span><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">COUNT</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">) </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> Orders </span><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> Orders.cust_id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Customers.cust_id) </span><span style="color:#F78C6C;">AS</span><span style="color:#A6ACCD;"> orders</span></span>
<span class="line"><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> Customers</span></span>
<span class="line"><span style="color:#F78C6C;">ORDER BY</span><span style="color:#A6ACCD;"> cust_name;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">cust_name           cust_state   orders</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">------------------- ----------   ------</span></span>
<span class="line"><span style="color:#A6ACCD;">Fun4All             </span><span style="color:#F78C6C;">IN</span><span style="color:#A6ACCD;">           </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">Fun4All             AZ           </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">Kids Place          OH           </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">The Toy Store       IL           </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">Village Toys        MI           </span><span style="color:#F78C6C;">2</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>Orders.cust_id = Customers.cust_id 是完全限定列名，为了防止产生字段歧义的。</p><h2 id="联结查询" tabindex="-1">联结查询 <a class="header-anchor" href="#联结查询" aria-label="Permalink to &quot;联结查询&quot;">​</a></h2><p>如果数据存储在多个表中，怎样用一条 SELECT 语句就检索出数据呢？ 答案是使用联结</p><h3 id="创建联结" tabindex="-1">创建联结 <a class="header-anchor" href="#创建联结" aria-label="Permalink to &quot;创建联结&quot;">​</a></h3><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> vend_name, prod_name, prod_price</span></span>
<span class="line"><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> Vendors, Products</span></span>
<span class="line"><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> Vendors.vend_id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Products.vend_id;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="内联结" tabindex="-1">内联结 <a class="header-anchor" href="#内联结" aria-label="Permalink to &quot;内联结&quot;">​</a></h3><p>目前为止使用的联结称为等值联结，这种联结也称为内联结（inner join），下面的 SELECT 语句返回与 前面例子完全相同的数据：</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> vend_name, prod_name, prod_price</span></span>
<span class="line"><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> Vendors</span></span>
<span class="line"><span style="color:#F78C6C;">INNER JOIN</span><span style="color:#A6ACCD;"> Products </span><span style="color:#F78C6C;">ON</span><span style="color:#A6ACCD;"> Vendors.vend_id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Products.vend_id;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><blockquote><p>👆更推荐用这种写法</p></blockquote><h3 id="联结多个表" tabindex="-1">联结多个表 <a class="header-anchor" href="#联结多个表" aria-label="Permalink to &quot;联结多个表&quot;">​</a></h3><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> prod_name, vend_name, prod_price, quantity</span></span>
<span class="line"><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> OrderItems, Products, Vendors</span></span>
<span class="line"><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> Products.vend_id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Vendors.vend_id</span></span>
<span class="line"><span style="color:#F78C6C;">AND</span><span style="color:#A6ACCD;"> OrderItems.prod_id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Products.prod_id</span></span>
<span class="line"><span style="color:#F78C6C;">AND</span><span style="color:#A6ACCD;"> order_num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20007</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>再回顾一下上面子查询的写法，看看如何优化</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> cust_name, cust_contact</span></span>
<span class="line"><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> Customers, Orders, OrderItems</span></span>
<span class="line"><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> Customers.cust_id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Orders.cust_id</span></span>
<span class="line"><span style="color:#F78C6C;">AND</span><span style="color:#A6ACCD;"> OrderItems.order_num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Orders.order_num</span></span>
<span class="line"><span style="color:#F78C6C;">AND</span><span style="color:#A6ACCD;"> prod_id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">RGAN01</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><blockquote><p>联结是 SQL 中一个最重要、最强大的特性，有效地使用联结需要对关系 数据库设计有基本的了解</p></blockquote><h2 id="高级联结" tabindex="-1">高级联结 <a class="header-anchor" href="#高级联结" aria-label="Permalink to &quot;高级联结&quot;">​</a></h2>`,133),o=[e];function r(t,c,i,C,d,y){return n(),a("div",null,o)}const u=s(p,[["render",r]]);export{b as __pageData,u as default};
